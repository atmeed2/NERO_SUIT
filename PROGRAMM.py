#_______________Импорты_______________
from tkinter import *
from tkinter import ttk
from PIL import ImageTk, Image
from tkinter import scrolledtext
from tkscrolledframe import ScrolledFrame
import time
import serial
import sys
import os
from pathlib import Path
from statistics import median
import requests
import json


#_______________Создание окна_______________
window = Tk()
window.title('Status Assessment System')
window.geometry('1920x1080')
window.configure(background = 'light grey' )

#_______________Данные_______________
#Фон главной страницы
ph = PhotoImage(file='phone.png')

#Фон Вкладки 'О программе'
ph_o = PhotoImage(file='urfu.png')

#Фон тренировок (Кнопки)
ph_tren_1 = PhotoImage(file = 'tren_1.png')
ph_tren_2 = PhotoImage(file = 'tren_2.png')
ph_tren_3 = PhotoImage(file = 'tren_3.png')
ph_tren_4 = PhotoImage(file = 'tren_4.png')
ph_tren_5 = PhotoImage(file = 'tren_5.png')
ph_tren_6 = PhotoImage(file = 'tren_6.png')
ph_tren_7 = PhotoImage(file = 'tren_7.png')
ph_tren_8 = PhotoImage(file = 'tren_8.png')
ph_tren_9 = PhotoImage(file = 'tren_9.png')
ph_tren_10 = PhotoImage(file = 'tren_10.png')


#Цвета интерфейса
c_dan = '#404993'                            #'#54aedb'                     #'#e5c777'
c_dan_2 = '#4953a8'                          #'#74aedb'                     #'#e7d094'
c_graph = '#404993'                          #'#54aedb'                     #'#4e93a2'
c_graph_2 ='#4953a8'                         #'#74aedb'                     #'#63b7c9'
c_tren =  '#3dc482'                          #'#a1ce9a'
c_tren_2 ='#36d587'                          #'#b1de9d'
c_test = '#50c089'

#Статусы данных и подключенного устройства
status=1
status_dev=1
status_dev_r=1

#Качество данных(1 - Eсть проблемы                0 - Нет проблем)
status_dan_right=1
status_dan_left=1

#Статус тренировки
t1=0
t2=0
t3=0
t4=0
t5=0
t6=0
t7=0
t8=0
t9=0
t10=0

#Данные человека
age = 16
pcyho = 0          # 1 - Есть             0 - Нет проблем
times = 3
weight = 65
height = 173
score = 15
#Данные по Глазго
glaz_score = 0
voice_score = 0
reaction_score = 0
#Выводимые данные
time_dan = ''
age_dan = ''
weight_dan = ''
height_dan = ''
dan_emg_1 = []
dan_gir_1 = []
dan_emg_2 = []
dan_gir_2 = []
dan_all = ''

#Качество данных (0 - неизвестно     1 - хорошо     2 - плохо)
quality_dan_1 = ''
quality_dan_2 = ''
quality_dan_3 = ''
quality_dan_4 = ''
no_dan_1 = ''
no_dan_2 = ''
no_dan_3 = ''
no_dan_4 = ''
qua_no_dan_1 = 'Качество данных: '
qua_no_dan_2 = 'Качество данных: '
qua_no_dan_3 = 'Качество данных: '
qua_no_dan_4 = 'Качество данных: '

#Имя тренировок
name_tren_1 = ['Общая тренировка', 1430, 'Средняя']
name_tren_2 = ['Быстрая тренировка', 1410, 'Легкая']
name_tren_3 = ['Постельная тренировка', 1330, 'Щадящая']
name_tren_4 = ['Сидячая тренировка ', 1410, 'Щадящая']
name_tren_5 = ['Легкая тренировка', 1450, 'Щадящая']
name_tren_6 = ['Аэробная тренировка', 1400, 'Щадящая']
name_tren_7 = ['Бодрящая тренировка', 1380, 'Средняя']
name_tren_8 = ['Общая тренировка №2', 1370, 'Средняя']
name_tren_9 = ['Школьная разминка', 1420, 'Средняя']
name_tren_10 = ['Легочная тренировка', 1400, 'Щадящая']
name_tren_11 = ['Название тренировки', 1400, '']
name_tren_12 = ['Название тренировки', 1400, '']
name_tren_13 = ['Название тренировки', 1400, '']
name_tren_14 = ['Название тренировки', 1400, '']
name_tren_15 = ['Название тренировки', 1400, '']
#Время тренировок
time_tren_1 = 2220
time_tren_2 = 1920
time_tren_3 = 2400
time_tren_4 = 1980
time_tren_5 = 1440
time_tren_6 = 1560
time_tren_7 = 1860
time_tren_8 = 2100
time_tren_9 = 2160
time_tren_10 = 1980
time_tren_11 = 2400
#Колличество заданий в тренировке
numb_tr_1 = 0
numb_tr_2 = 0
numb_tr_3 = 0
numb_tr_4 = 0
numb_tr_5 = 0
numb_tr_6 = 0
numb_tr_7 = 0
numb_tr_8 = 0
numb_tr_9 = 0
numb_tr_10 = 0
numb_tr_11 = 0
numb_tr_12 = 0
numb_tr_13 = 0
numb_tr_14 = 0
numb_tr_15 = 0
#Текст тренировок
text_tren_1 = ['Сядьте на стул, выпрямите спину и посмотрите немного выше линии глаз. Расслабьте диафрагму, начиная дышать настолько мелко, чтобы в груди появилось ощущение нехватки воздуха', 'Поднимание спичечного коробка с пола или стола', 'Исходное положение стоя с опущенными руками. На вдохе поднимете руки вверх над головой, одновременно потягиваясь и вставая на пальчиках. На выдохе расслабляете, сгибая туловище вниз и опуская', 'Сгибание-разгибание кисти в кулак при помощи эспандера с одновременным отведением рук от туловища', 'В положении стоя, ноги на ширине плеч, руки укладываете на пояс. Производятся наклоны туловища вправо-влево, вперед-назад', 'Из предыдущего исходного положения выполнить упражнение ножницы (поочередное перемещение, вытянутых перед собой перекрещенных рук, на противоположную сторону', 'Приседания 20 раз']
text_tren_2 = ['Спокойно сделайте вдох через нос. Далее круговое движение правым плечом 2 раза назад', 'На секунду задержите дыхание, сопроводив задержку ещё одним круговым движением плеча', 'Выдохните через рот, сделав круговое движение правым плечом 2 раза назад', 'Повторите то же самое левым плечом', 'Лежа на спине, руки вдоль туловища, носки тянем на себя и от себя', 'Поочередно один носок тянем на себя, другой — от себя', 'Ноги шире плеч, носки поворачиваем внутрь и наружу, держать 6 секунд', 'Ноги шире плеч, оба носка разворачиваем по очереди в правую сторону и в левую, держать 7 секунд', 'Круговые движения в голеностопном суставе, по часовой стрелке и против', 'Руки вдоль туловища. Правую пятку тянем вниз, затем левую, растягиваем от бедра 5 секунд', '«Велосипед», ноги сгибаем — разгибаем в коленном суставе вперед и назад', 'Носки тянем на себя, фиксируем 6 секунд', 'Правую ногу поднимаем под 45 градусов по отношению к полу 5 секунд, затем левой тоже самое', 'Ноги выпрямляем, коленные суставы тянем к груди', 'Ноги согнуть в коленных суставах, стопы на пол, руки вдоль туловища. Поднимаем таз на выдохе и держим 5 секунд', 'Приседание 20 раз']
text_tren_3 = ['Сделайте вдох и два круговых движения правой рукой назад', 'На секунду задержите дыхание, не прерывая упражнение, сделайте ещё один оборот рукой', 'Выдохните, при этом сделав круговое движение правой рукой назад', 'Тоже самое проделайте левой рукой', 'Сгибание и разгибание ног в голеностопных суставах (Дыхание произвольное)', 'Сгибание и разгибание пальцев кисти (Дыхание произвольное)', 'Согнуть руки к плечам, локти в стороны - вдох, опустить руки вдоль туловища - выдох', 'Руки вдоль туловища, развернуть ладонями вверх — вдох. Приподнимая руки вперед- вверх, ладони вниз, потянуться ими к коленям, приподнимая голову, напрягая мышцы туловища, ног - выдох', 'Сделать 2-3 спокойных вдоха и расслабиться', 'Поочередное сгибание ног со скольжением по постели. Дыхание произвольное', 'Руки вдоль туловища, ноги выпрямлены и немного разведены. Повернуть руки ладонями вверх, немного отвести их, одновременно стопы ног повернуть кнаружи - вдох. Руки повернуть ладонями вниз, стопы ног внутрь - выдох', 'Ноги согнуты в коленях. Поднять правую руку вверх - вдох; потянуться правой рукой к левому колену - выдох. Сделать то же левой рукой к правому колену (Упражнение можно усложнить, сочетая касание с выпрямлением ноги вверх)', 'Спокойное дыхание. Расслабиться', 'Согнуть руки в локтевых суставах, пальцы сжать в кулаки, вращение кистей в лучезапястных суставах с одновременным вращением стоп', 'Ноги согнуты в коленях. Поднять правую ногу вверх, согнуть ее, вернуться в исходное положение. То же сделать другой ногой', 'Ноги выпрямлены и немного разведены, руки вдоль туловища. Правую руку на голову - вдох; коснуться правой рукой противоположного края постели - выдох. То же левой рукой (Это упражнение можно усложнить поворотом туловища)', 'Руки вдоль туловища. Свести ягодицы, одновременно напрягая мышцы ног. Расслабить их (Дыхание произвольное)', 'На вдох поднять руки вверх, на выдох - опустить их']
text_tren_4 = ['Вдохните через нос и поверните голову вправо', 'Зафиксируйте положение на несколько секунд, далее на задержке дыхания поверните голову влево', 'Выдохните через рот', 'Пройдя цикл, верните голову в исходное положение. Далее сделайте всё то же самое, только в другую сторону', 'Прислониться к спинке стула, руки на коленях, не напрягаться. Руки к плечам, локти развести в стороны - вдох, опустить руки на колени - выдох', 'Перекат с пяток на носки с разведением ног в стороны, одновременно сжимать и разжимать пальцы в кулаки (Дыхание произвольное)', 'Руки вперед - вверх - вдох, руки опустить через стороны вниз - выдох', 'Скольжение ног по полу вперед и назад, не отрывая стопы от пола (Дыхание произвольное)', 'Развести руки в стороны - вдох, руки на колени, наклонить туловище вперед - выдох', 'Сидя на краю стула, отвести в сторону правую руку и левую ногу - вдох. Опустить руку и согнуть ногу - выдох. То же сделать в другую сторону', 'Сидя на стуле, опустить руки вдоль туловища. Поднимая правое плечо вверх, одновременно опустить левое плечо вниз. Затем изменить положение плеч', 'Развести руки в стороны - вдох, руками подтянуть правое колено к груди и опустить его - выдох. Сделать то же, подтягивая левое колено к груди', 'Сидя на краю стула, руки перевести на пояс. Расслабить туловище, свести локти и плечи вперед, опустить голову на грудь. Делая вдох - выпрямиться, развести локти и плечи, спину прогнуть, голову повернуть вправо. Расслабиться, голову на грудь. Продолжая делать упражнение, голову повернуть влево - выдох', 'Спокойное дыхание']
text_tren_5 = ['Во время вдоха обнимите себя за плечи, чтобы кончики пальцев коснулись лопаток (для удобства можно немного наклониться вперёд)', 'Зафиксируйте положение, на несколько секунд задержав дыхание', 'На выдохе бросьте руки вниз, расслабив их', 'Следующее повторение необходимо выполнять, поменяв расположение рук: если правая была сверху, то она смещается вниз, соответственно, левая рука идёт наверх', 'Попеременное напряжение мышц рук и ног с последующим расслаблением их (Дыхание произвольное)', 'Руки к плечам, локти в стороны - вдох. Руки на колени - выдох', 'Перекат стоп с пятки на носок, одновременно сжимая пальцы в кулаки (Дыхание произвольное)', 'Правую руку в сторону - вдох. Правой рукой коснуться левой ноги, выпрямляя ее вперед - выдох. Левую руку в сторону - вдох. Левой рукой коснуться правой ноги, выпрямляя ее вперед - выдох', 'Руки на поясе. Повороты туловища вправо и влево (Дыхание произвольное)', 'Отдых - походить по залу, в движении выполнить дыхательные упражнения - поднять руки вверх (вдох), опустить через стороны (выдох). Непродолжительная ходьба на носках, на пятках.', 'Руки в стороны - вдох, руки вниз - выдох', 'Руки в стороны - вдох. Руками подтянуть правое колено к груди - выдох. Руки в стороны - вдох. Руками подтянуть левое колено к груди - выдох']
text_tren_6 = ['Ритмичное носовое дыхание с закрытым ртом в привычном темпе', 'Ритмичное дыхание через одну ноздрю при зажатой рукой другой ноздре, попеременно по 3-4 раза', 'Стараясь держать грудную клетку неподвижной, во время вдоха максимально выпячиваете переднюю стенку живота, особенно ее нижнюю часть. Во время выдоха брюшную стенку энергично втягиваете', 'Стараясь держать неподвижной переднюю стенку живота, во время вдоха максимально расширяете грудную клетку. При выдохе грудную клетку энергично сжимаете. Дышать через нос','Глаза закрыты, ноги на ширине плеч, руки согнуты в локтях на уровне талии. Со вдохом вытяните руки вверх, широко раскрыв ладони. С выдохом вернитесь в исходное положение', 'Сделайте глубокий вдох (через нос или через рот) и выдыхайте воздух через нос несколькими короткими интенсивными толчками. Повторите три раза. Отдохните и сделайте еще два подхода по три раза каждый', 'Исходное положение – сидя. Прежде чем сделать вдох, следует выдохнуть воздух из легких. После выдоха сделать медленный вдох через нос. При выдохе плечи медленно опускаются вниз', 'Сделать выдох через нос, ребра при этом опускаются, затем –полный и продолжительный вдох, расширяя грудную клетку. Плечи и живот при вдохе должны оставаться неподвижными. Затем снова выдох и снова вдох', 'Исходное положение –то же. Сделать полный выдох, при этом живот вбирается внутрь. Затем медленно вдохнуть воздух через нос, выпятив живот, не двигая грудной клеткой и руками. Нижняя часть легких наполняется воздухом. Снова выдохнуть воздух – живот уходит глубоко внутрь', 'Исходное положение – стоя, выпрямиться, поставить ноги на ширину плеч. Сделать вдох. На выдохе наклониться, расслабив шею и плечи так, чтобы голова и руки свободно свисали к полу. Дышать глубоко следить за своим дыханием', ' В течение 3 минут дышите медленно, спокойно и глубоко (Можно закрыть глаза.)']
text_tren_7 = ['Исходное положение – стоя или сидя. Спина прямая, руки согнуты в локтях, размещены вдоль тела. На вдохе сжать кулаки, на выдохе – расслабить','Положение – стоя или сидя на стуле. Ноги – на ширине плеч. Правая рука на животе, левая – на грудной клетке, голова наклонена вперед. На вдохе – развести плечи, отклоняя назад туловище, живот надувается. На продолжительном выдохе туловище возвращается в исходное положение, живот сдувается','Локти согнуты, кисти рук расположены на боковой нижней части грудной клетки. Растягивать грудную клетку на вдохе при помощи кончиков пальцев, захватывая подреберное пространство. Продолжительный выдох – туловище наклоняется вперед, живот втягивается, руки надавливают на нижние отделы грудной клетки','Исходное положение - сидя. Руки согнуты в локтях, ладони на талии. Вдохнуть, поднять руки, голову наклонить назад. Выдохнуть – туловище слегка наклоняется вперед, а колено прижимается к грудной клетке', 'Встаньте прямо, наклоните голову вперёд. Наклоните голову влево. Откиньте голову назад. Наклоните голову вправо','Встаньте прямо, поднимите прямые руки в стороны на уровень плеч, ладони смотрят вверх. Медленно описывайте руками небольшие круги диаметром около 15 сантиметров. В основном движение исходит от плеч, напряжение чувствуется в их задней части','Встаньте прямо, заведите руки за голову. С выдохом наклоните корпус вперёд до 45 градусов, шея на одной линии со спиной, взгляд направьте в пол перед собой. Со вдохом выпрямитесь, поднимите голову.Слегка прогнитесь назад, чтобы почувствовать растяжение мышц живота. Взгляд направлен в потолок. Выпрямитесь','Встаньте прямо, ноги на ширине плеч, руки поднимите в стороны на уровень плеч, разверните вниз ладонями. Со вдохом поднимитесь на носочки. Продолжая вдох, опуститесь в приседание. На выдохе поднимитесь из приседания. Продолжая выдох, опуститесь на полную стопу','Встаньте прямо, со вдохом поднимите плечи. Продолжая вдох, подайте плечи вперёд. С выдохом опустите плечи. Продолжая выдох, отведите плечи назад','Встаньте прямо, ноги на ширине плеч, прямые руки поднимите в стороны на уровень плеч. Наклонитесь, разворачивая корпус влево и сгибая правое колено. Правая рука касается пола между ногами, левая вытянута наверх. Голова повёрнута к потолку, взгляд направлен на левую руку. Вернитесь в исходное положение и повторите в другую сторону','Встаньте прямо, руки поднимите над головой и сплетите пальцы в замок, повернув ладони к голове. Чем ближе руки к голове, тем эффективнее упражнение. Мягко наклонитесь вперёд. Движение контролируемое, без рывков и экстремальных наклонов. Наклонитесь вправо. Наклонитесь назад. Наклонитесь влево', 'Приседания 30 раз']
text_tren_8 = ['2 секунды на вдох, от 3 до 5 секунд на медленный выдох, затем двухсекундная пауза для подготовки к следующему вдоху', 'Одну руку вытянуть в сторону. Повернувшись всем корпусом, второй вытянутой рукой хлопнуть в ладоши. Затем аналогично выполняется поворот в другую сторону.', 'Возьмитесь за спинку стула и приседайте, чередуя присед с подъемом на цыпочках','Стоя на четвереньках (руки прямые, кисти под плечами на ширине плеч, колени под тазобедренными суставами на ширине таза, спина прямая, голова прямо, смотрим вниз), выгибаем спину вверх, подбородок прижимаем к груди, удерживаем положение с максимальным вытяжением 5 секунд, затем медленно возвращаемся в исходное положение', 'Стоя на четвереньках, попеременно поднимаем противоположную руку и ногу до уровня туловища, спину сохраняем прямой, не заваливаемся на опорную ногу, удерживаем в верхней точке по 5-10 сек', 'Лёжа на боку, голова лежит на согнутой в локте руке, поднимаем прямую ногу вверх 10-15 раз, затем отводим прямую ногу вперёд и снова 10-15 раз вверх, далее отводим ногу назад и снова 10-15 раз вверх, по 2 подхода на каждом боку. Выполняем плавно, с задержкой в верхней точке', 'Лежа на спине, ноги сгибаем в коленях под углом 90-120 градусов и с опорой на пятки и плечи медленно поднимаем таз вверх и удерживаем положение 10 сек., отдыхаем 10 сек', 'Лежа на боку, ноги согнуты в коленях под 90 градусов, бедра и туловище создают прямую линию, с опорой на предплечье и колено, поднимаем таз и удерживаем 10 сек., отдыхаем 10 сек', 'Стоя на четвереньках, поднимаем ногу, согнутую в колене на 90 градусов вверх так, чтобы в верхней точке стопа была параллельно потолку', 'Опираясь на спинку стула, вдохните, одновременно немного прогибаясь назад. Во время выдоха вернитесь в исходное положение', 'Опираясь на стул, поочередно делайте круговые движения стопами. Повторите по 20 раз для каждой стопы', 'Поставьте ноги на ширину плеч и немного согните их в коленях. Ладони положите на бедра и делайте круговые движения тазом влево и вправо', 'Станьте на четвереньки. Выгните спину вверх и зафиксируйте положение на 5 секунд. Затем прогнитесь, поднимая подбородок вверх, зафиксируйте это положение также на 5 секунд', 'Встаньте прямо, соедините ладони перед грудью и надавите ими друг на друга так, чтобы ощутить напряжение мышц груди', 'Развести руки в стороны. Держа голову прямо, некоторое время сидеть ровно, удерживая равновесие', 'Держась руками за край кровати, вытянуть на вдохе одну ногу параллельно полу, на выдохе опустить вниз. Затем повторить с другой ноги', 'Приседания 20 раз']
text_tren_9 = ['Зажмите пальцем правую ноздрю. Вдох через левую ноздрю на 4 счета. Пауза - задержка дыхания на 8 счетов. Зажмите левую ноздрю, выдох на 4 счета через правую ноздрю. То же выполните, начиная вдох с правой ноздри','Встаньте прямо. Поверните голову сначала в одну сторону, затем в другую', 'Опустите подбородок к груди и зафиксируйтесь в этой позе на 3−4 секунды', 'Слегка запрокиньте голову назад, а затем верните ее в вертикальное положение', 'Ноги вместе, руки перед грудью, пальцы рук соединены «в замок». Не разжимая пальцев, выпрямляем руки влево, поворачиваем их вправо ладонями кверху. Повторяем упражнение в другую сторону', 'Сядьте на стул, выпрямите спину, а руки заведите за голову. Глубокий вдох должен сопровождаться прогибом назад, а выдох – наклоном вперед', 'В положении стоя поднимите руки вверх. Делайте поочередные наклоны в стороны, каждый раз возвращаясь в исходное положение', 'Ноги на ширине плеч, руки в стороны. Начинаем круговые движения выпрямленными руками, одновременно с силой сжимая и разжимая пальцы', 'Пятки вместе, носки врозь, руки свободно опущены. Наклон вправо - правая рука скользит по бедру, левую руку заводим за голову - выдох, возвращаемся в исходное положение - вдох', 'Ложитесь на спину. Согнутые в коленях ноги аккуратно поворачивайте сначала в одну сторону, потом в другую', 'Лежа на спине, поочередно соединяйте правую руку с вытянутой левой ногой, и наоборот', 'Лежа на животе, поочередно поднимайте вверх ноги. Старайтесь задерживать конечности на весу', 'Прямую ногу поднимаем вперед и держим на весу внутри круга. Работаем стопой: сгибаем, разгибаем, вращаем и потряхиваем', 'Отводим правую ногу вправо, ставим ее на носок. По команде делаем мах от бедра влево внутри круга. То же левой ногой', 'Заканчиваем разминку ходьбой, чередующейся с бегом на месте, темп постепенно замедляем, переходим на шаг']
text_tren_10 = ['Вращение головой. Исходное положение — стоя, руки на пояс. На счет 1—4 — круговое движение головой вправо. То же в другую сторону', 'Исходное положение — стоя, руки за спину (на пояснице) , кисти переплетены. На счет 1—2 — вытянуть руки вниз за спиной, отводя плечи назад, выдох', 'Исходное положение — стоя. руки — на пояс. На счет 1—2—поворот туловища вправо; 3—4 — исходное положние. То же — в другую сторону','Стоя ноги вместе, нос зажат пальцами. Не спеша, громко считать до 10 (рот закрыт), затем сделать глубокий вдох и полный выдох через нос', 'Встать прямо, ноги вместе, руки вдоль туловища. Вдох, затем наклон туловища в сторону. Выдох, руки скользят, при этом громко произносить «с-с-с-с»! Выпрямление – вдох, наклон в другую сторону', 'Исходное положение – стоя; ноги на ширине плеч. Поднять руки вверх (вдох носом), выполнить низкий наклон туловища вперед (выдох ртом)','Вдох через нос, рот закрыт. На удлиненном выдохе произносить звук «м-м-м»', 'Исходное положение – стоя; ноги вместе. Поднять руки вверх, хорошо потянуться, подняться на носки (вдох носом). Опустить руки вниз, опуститься на всю ступню (выдох ртом)', 'Исходное положение — стоя, руки на пояс. На счет 1 — поднять согнутую ногу коленом вверх: 2 — не опуская ноги, выпрямить ее вперед; 3 — вернуться в положение счета 1: 4 — исходное положение. То же — другой ногой','Сидя на стуле, опустить руку вдоль туловища. Поднимая правое плечо вверх, одновременно опустить левое плечо вниз. Затем изменить положение плеч', 'Исходное положение – сидя на стуле, откинувшись на его спинку. Поднять руки в стороны – вверх, скрещивая их над головой, как бы подавая сигнал флажками (вдох носом). Вернуться в Исходное положение (выдох)', 'Исходное положение – сидя на стуле. Дыхание через нос сначала одной ноздрей, потом другой, затем обеими одновременно. Рот закрыт', 'Исходное положение — стоя, руки на пояс, ногу вывести вперед на 45°, носок — на себя. На счет 1 — мах ногой скрестно перед опорной; 2 — мах в другую сторону. То же — другой ногой', 'Исходное положение — стоя, руки на пояс. На счет 1 — мах ногой вперед, носок на себя; 2 — вернувшись в исходное положение , мах ногой назад, носок на себя', 'Исходное положение — стоя, руки на пояс. На счет 1 — согнуть ногу как можно выше назад; 2 — не опуская ноги, выпрямить ее назад; 3 — вернуться в положение счета; 4 — исходное положение']
text_tren_11 = []
text_tren_12 = []
text_tren_13 = []
text_tren_14 = []
text_tren_15 = []
#Сколько выполняется каждое задание
time_zad_1 = [10, 5, 5, 5, 3, 3, 3]
time_zad_2 = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
time_zad_3 = []
time_zad_4 = []
time_zad_5 = []
time_zad_6 = []
time_zad_7 = []
time_zad_8 = []
time_zad_9 = []
time_zad_10 = []
#Запущен таймер или нет
timer_running = False
tren = 0
conf_l = 0
#Проблемы
prblm_right = []
prblm_left = []





#_______________DEF'ники_______________
#15 тренировка
def new_tren_15():
    global time_tren_15, name_tren_15, text_nagryz_tren, btn_vvod, btn_zad_tren
    name = "{}".format(text_name_tren.get())
    time = "{}".format(text_time_tr.get())
    nagr = "{}".format(text_nagryz_tren.get())

    time_tren_15 = int(time)
    name_tren_15[0] = str(name)
    name_tren_15[2] = str(nagr)

    btn_tren_15 = Button(self.inner_frame, text = '15', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_10)
    btn_tren_15.grid(column=14,row=0)
    label_btn_tren_15 = Label(self.inner_frame, text = name_tren_15[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
    label_btn_tren_15.grid(column=14,row=1)
    label_btn_tren_v_15 = Label(self.inner_frame, text = name_tren_15[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
    label_btn_tren_v_15.grid(column=14,row=2)

    btn_reset_dan.destroy()




def insert_tren_15():
    global text_tren_15
    tren = "{}".format(text_zad_tren.get())
    tren = str(tren)
    text_tren_15.append(tren)
    print(text_tren_15)


#14 тренировка
def new_tren_14():
    global time_tren_14, name_tren_14, text_nagryz_tren, btn_vvod, btn_zad_tren
    name = "{}".format(text_name_tren.get())
    time = "{}".format(text_time_tr.get())
    nagr = "{}".format(text_nagryz_tren.get())

    time_tren_14 = int(time)
    name_tren_14[0] = str(name)
    name_tren_14[2] = str(nagr)

    btn_tren_14 = Button(self.inner_frame, text = '14', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_10)
    btn_tren_14.grid(column=13,row=0)
    label_btn_tren_14 = Label(self.inner_frame, text = name_tren_14[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
    label_btn_tren_14.grid(column=13,row=1)
    label_btn_tren_v_14 = Label(self.inner_frame, text = name_tren_14[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
    label_btn_tren_v_14.grid(column=13,row=2)


def insert_tren_14():
    global text_tren_14
    tren = "{}".format(text_zad_tren.get())
    tren = str(tren)
    text_tren_14.append(tren)
    print(text_tren_14)


#13 тренировка
def new_tren_13():
    global time_tren_13, name_tren_13, text_nagryz_tren, btn_vvod, btn_zad_tren
    name = "{}".format(text_name_tren.get())
    time = "{}".format(text_time_tr.get())
    nagr = "{}".format(text_nagryz_tren.get())

    time_tren_13 = int(time)
    name_tren_13[0] = str(name)
    name_tren_13[2] = str(nagr)

    btn_tren_13 = Button(self.inner_frame, text = '13', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_10)
    btn_tren_13.grid(column=12,row=0)
    label_btn_tren_13 = Label(self.inner_frame, text = name_tren_13[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
    label_btn_tren_13.grid(column=12,row=1)
    label_btn_tren_v_13 = Label(self.inner_frame, text = name_tren_13[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
    label_btn_tren_v_13.grid(column=12,row=2)


def insert_tren_13():
    global text_tren_13
    tren = "{}".format(text_zad_tren.get())
    tren = str(tren)
    text_tren_13.append(tren)
    print(text_tren_13)


#12 тренировка
def new_tren_12():
    global time_tren_12, name_tren_12, text_nagryz_tren, btn_vvod, btn_zad_tren
    name = "{}".format(text_name_tren.get())
    time = "{}".format(text_time_tr.get())
    nagr = "{}".format(text_nagryz_tren.get())

    time_tren_12 = int(time)
    name_tren_12[0] = str(name)
    name_tren_12[2] = str(nagr)

    btn_tren_12 = Button(self.inner_frame, text = '12', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_10, command = tren_12)
    btn_tren_12.grid(column=11,row=0)
    label_btn_tren_12 = Label(self.inner_frame, text = name_tren_12[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
    label_btn_tren_12.grid(column=11,row=1)
    label_btn_tren_v_12 = Label(self.inner_frame, text = name_tren_12[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
    label_btn_tren_v_12.grid(column=11,row=2)


def insert_tren_12():
    global text_tren_12
    tren = "{}".format(text_zad_tren.get())
    tren = str(tren)
    text_tren_12.append(tren)
    print(text_tren_12)


#11тренировка
def new_tren_11():
    global time_tren_11, name_tren_11, text_nagryz_tren, btn_vvod, btn_zad_tren
    name = "{}".format(text_name_tren.get())
    time = "{}".format(text_time_tr.get())
    nagr = "{}".format(text_nagryz_tren.get())

    time_tren_11 = int(time)
    name_tren_11[0] = str(name)
    name_tren_11[2] = str(nagr)

    btn_tren_11 = Button(self.inner_frame, text = '11', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_10, command = tren_11)
    btn_tren_11.grid(column=10,row=0)
    label_btn_tren_11 = Label(self.inner_frame, text = name_tren_11[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
    label_btn_tren_11.grid(column=10,row=1)
    label_btn_tren_v_11 = Label(self.inner_frame, text = name_tren_11[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
    label_btn_tren_v_11.grid(column=10,row=2)


#Ввод тренировки в массив
def insert_tren_11():
    global text_tren_11
    tren = "{}".format(text_zad_tren.get())
    tren = str(tren)
    text_tren_11.append(tren)
    

#Выход из новой тренеровок
def new_tren_exit():
    global fr_new_tren
    fr_new_tren.destroy()


def new_insert_new():
    global tren
    if tren == 0:
        insert_tren_11()
    elif tren == 1:
        insert_tren_12()
    elif tren == 2:
        insert_tren_13()
    elif tren == 3:
        insert_tren_14()
    elif tren == 4:
        insert_tren_15()


def new_tren_new():
    global tren
    if tren == 0:
        new_tren_11()
    elif tren == 1:
        new_tren_12()
    elif tren == 2:
        new_tren_13()
    elif tren == 3:
        new_tren_14()
    elif tren == 4:
        new_tren_15()

    tren += 1

#Страница добавления новой тренировки
def new_tren():
    global fr_new_tren, text_zad_tren, text_name_tren, text_nagryz_tren, text_time, text_time_tr, btn_vvod, btn_zad_tren
    fr_new_tren = Frame(tab_tren)
    fr_new_tren.pack()
    label_new_tren = Label(fr_new_tren, width =1920, height = 1080, bg = 'white')
    label_new_tren.pack()

   

    label_btn_all_dan = Label(fr_new_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_new_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = new_tren_exit)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_new_tren, bg = c_tren, fg = 'white' , text = 'Новая тренировка', font = ('Product Sans Medium', 25))
    label_name_tren.place(x=1450, y = 0)

    btn_vvod = Button(fr_new_tren, text = 'Записать тренировку', width = 84, height = 1, font = ('Product Sans Medium', 20), bg = c_test, fg = 'white', bd = 0, activebackground = 'white', command = new_tren_new)
    btn_vvod.place(x=0,y=872)

    label_name_tren = Label(fr_new_tren, bg = c_tren, fg = 'white' , text = 'Название новой тренировки:', font = ('Product Sans Medium', 30), width = 25, justify = LEFT)
    label_name_tren.place(x = 30 , y = 95)
    text_name_tren = Entry(fr_new_tren, font = ('Product Sans Medium', 25), fg = c_tren, relief = 'flat', width = 30)
    text_name_tren.place(x = 30 , y = 190)
    text_name_tren.insert(0,'"Название"')
    label_nagryz_tren = Label(fr_new_tren, bg = c_tren, fg = 'white' , text = 'Тип нагрузки:', font = ('Product Sans Medium', 30), width = 25, justify = LEFT)
    label_nagryz_tren.place(x = 30 , y = 280)
    text_nagryz_tren = Entry(fr_new_tren, font = ('Product Sans Medium', 25), fg = c_tren, relief = 'flat', width = 30)
    text_nagryz_tren.place(x = 30 , y = 375)
    text_nagryz_tren.insert(0,'"Нагрузка"')
    label_zad = Label(fr_new_tren, bg = c_tren, fg = 'white' , text = 'Задание:', font = ('Product Sans Medium', 30), width = 25, justify = LEFT)
    label_zad.place(x = 30, y = 465)
    text_zad_tren = Entry(fr_new_tren, font = ('Product Sans Medium', 25), fg = c_tren, relief = 'flat', width = 30)
    text_zad_tren.place(x = 30 , y = 560)
    text_zad_tren.insert(0,'"Задание"')
    label_zad_tren_po = Label(fr_new_tren, fg = 'light grey', bg = 'white' , text = 'Каждое задание вводится по одному', font = ('Product Sans Medium', 8))
    label_zad_tren_po.place(x = 30 , y = 720)
    btn_zad_tren = Button(fr_new_tren, bg = c_tren_2, fg = 'white' , text = 'Ввод', font = ('Product Sans Medium', 20), height = 1, width = 38, justify = LEFT, bd = 0, command = new_insert_new)
    btn_zad_tren.place(x = 30, y = 640)
    label_time = Label(fr_new_tren, bg = c_tren, fg = 'white' , text = 'Время тренировки:', font = ('Product Sans Medium', 30), width = 25, justify = LEFT)
    label_time.place(x = 1010, y = 95)
    text_time_tr = Entry(fr_new_tren, font = ('Product Sans Medium', 25), fg = c_tren, relief = 'flat', width = 30)
    text_time_tr.place(x = 1010 , y = 190)
    text_time_tr.insert(0,0)
    label_zad_tren_po = Label(fr_new_tren, fg = 'light grey', bg = 'white' , text = 'Время в секундах*', font = ('Product Sans Medium', 8))
    label_zad_tren_po.place(x = 1010 , y = 270)


#Сбор данных
def conf_labl_left():
    global label_zam_dan
    label_zam_dan.configure(text = 'Обработка данных')
    site_sbor_left()


#Сбор данных
def conf_labl_right():
    global label_zam_dan
    label_zam_dan.configure(text = 'Обработка данных')
    site_sbor_right()

#Сбор данных с сайта ПРАВЫЙ
def site_sbor_right():
    response = requests.get('http://192.168.43.169')
    response_2 = requests.get('http://192.168.43.151')

    #ЭМГ 2
    dan_2 = response_2.text
    dan_2 = dan_2.split('{')
    del dan_2[0]
    emg2 = dan_2[0].split('[')
    x_2 = dan_2[1].split('[')
    y_2 = dan_2[2].split('[')
    z_2 = dan_2[3].split('[')
    emg2 = emg2[1]
    x_2 = x_2[1]
    y_2 = y_2[1]
    z_2 = z_2[1]
    emg2 = emg2.split(']')
    x_2 = x_2.split(']')
    y_2 = y_2.split(']')
    z_2 = z_2.split(']')
    emg2 = emg2[0]
    x_2 = x_2[0]
    y_2 = y_2[0]
    z_2 = z_2[0]
    emg2 = emg2.split(',')
    x_2 = x_2.split(',')
    y_2 = y_2.split(',')
    z_2 = z_2.split(',')

    #Вывод кол-во данных
    print(len(x_2))
    print(len(y_2))
    print(len(z_2))


    file = open('emg_1_right.txt', 'w+')
    for i in range(0,len(emg2)):
        file.write(str(emg2[i])+' ')
    file.close()


    file = open('x_gir1_right.txt', 'w+')
    for i in range(0,len(x_2)):
        file.write(str(x_2[i])+' ')
    file.close()

    file = open('y_gir1_right.txt', 'w+')
    for i in range(0,len(y_2)):
        file.write(str(y_2[i])+' ')
    file.close()

    file = open('z_gir1_right.txt', 'w+')
    for i in range(0,len(z_2)):
        file.write(str(z_2[i])+' ')
    file.close()

    #ЭМГ 1
    dan = response.text
    dan = dan.split('{')
    del dan[0]
    emg1 = dan[0].split('[')
    x = dan[1].split('[')
    y = dan[2].split('[')
    z = dan[3].split('[')
    emg1 = emg1[1]
    x = x[1]
    y = y[1]
    z = z[1]
    emg1 = emg1.split(']')
    x = x.split(']')
    y = y.split(']')
    z = z.split(']')
    emg1 = emg1[0]
    x = x[0]
    y = y[0]
    z = z[0]
    emg1 = emg1.split(',')
    x = x.split(',')
    y = y.split(',')
    z = z.split(',')

    #Вывод кол-во данных
    print(len(x))
    print(len(y))
    print(len(z))

    #Запись целых чисел
    file = open('emg_2_right.csv', 'w+')
    for i in range(0,len(emg1)):
        file.write(str(emg1[i])+' ')
    file.close()


    file = open('x_gir2_right.csv', 'w+')
    for i in range(0,len(x)):
        file.write(str(x[i])+' ')
    file.close()

    file = open('y_gir2_right.csv', 'w+')
    for i in range(0,len(y)):
        file.write(str(y[i])+' ')
    file.close()

    file = open('z_gir2_right.csv', 'w+')
    for i in range(0,len(z)):
        file.write(str(z[i])+' ')
    file.close()

    anal_dan_right()


#Сбор данных с сайта ЛЕВЫЙ
def site_sbor_left():
    response = requests.get('http://192.168.43.169')
    response_2 = requests.get('http://192.168.43.151')

    #ЭМГ 2
    dan_2 = response_2.text
    dan_2 = dan_2.split('{')
    del dan_2[0]
    emg2 = dan_2[0].split('[')
    x_2 = dan_2[1].split('[')
    y_2 = dan_2[2].split('[')
    z_2 = dan_2[3].split('[')
    emg2 = emg2[1]
    x_2 = x_2[1]
    y_2 = y_2[1]
    z_2 = z_2[1]
    emg2 = emg2.split(']')
    x_2 = x_2.split(']')
    y_2 = y_2.split(']')
    z_2 = z_2.split(']')
    emg2 = emg2[0]
    x_2 = x_2[0]
    y_2 = y_2[0]
    z_2 = z_2[0]
    emg2 = emg2.split(',')
    x_2 = x_2.split(',')
    y_2 = y_2.split(',')
    z_2 = z_2.split(',')

    #Вывод кол-во данных
    print(len(x_2))
    print(len(y_2))
    print(len(z_2))


    file = open('emg_1_left.txt', 'w+')
    for i in range(0,len(emg2)):
        file.write(str(emg2[i])+' ')
    file.close()


    file = open('x_gir1_left.txt', 'w+')
    for i in range(0,len(x_2)):
        file.write(str(x_2[i])+' ')
    file.close()

    file = open('y_gir1_left.txt', 'w+')
    for i in range(0,len(y_2)):
        file.write(str(y_2[i])+' ')
    file.close()

    file = open('z_gir1_left.txt', 'w+')
    for i in range(0,len(z_2)):
        file.write(str(z_2[i])+' ')
    file.close()

    #ЭМГ 1
    dan = response.text
    dan = dan.split('{')
    del dan[0]
    emg1 = dan[0].split('[')
    x = dan[1].split('[')
    y = dan[2].split('[')
    z = dan[3].split('[')
    emg1 = emg1[1]
    x = x[1]
    y = y[1]
    z = z[1]
    emg1 = emg1.split(']')
    x = x.split(']')
    y = y.split(']')
    z = z.split(']')
    emg1 = emg1[0]
    x = x[0]
    y = y[0]
    z = z[0]
    emg1 = emg1.split(',')
    x = x.split(',')
    y = y.split(',')
    z = z.split(',')

    #Вывод кол-во данных
    print(len(x))
    print(len(y))
    print(len(z))

    #Запись целых чисел
    file = open('emg_2_left.txt', 'w+')
    for i in range(0,len(emg1)):
        file.write(str(emg1[i])+' ')
    file.close()


    file = open('x_gir2_left.txt', 'w+')
    for i in range(0,len(x)):
        file.write(str(x[i])+' ')
    file.close()

    file = open('y_gir2_left.txt', 'w+')
    for i in range(0,len(y)):
        file.write(str(y[i])+' ')
    file.close()

    file = open('z_gir2_left.txt', 'w+')
    for i in range(0,len(z)):
        file.write(str(z[i])+' ')
    file.close()

    anal_dan_left()


#Распределение тренировок
def tren_raspr():
    if score == 15: #сознание ясное
        pass
    elif 13 <= score <= 14: #оглушение
        pass
    elif 9 <= score <= 12: #сопор
        pass
    elif 4 <= score <= 8: #кома
        pass
    elif score <= 3: #гибель коры
        pass



#Данные для графиков ПРАВАЯ РУКА
def anal_dan_right():
    global dan_emg1_right,srz_gir1_x_right,srz_gir1_y_right,srz_gir1_z_right,srz_gir2_x_right,srz_gir2_y_right,srz_gir2_z_right, dan_emg2_right, dan_gir1_x_right, dan_gir1_y_right, dan_gir1_z_right, dan_gir2_x_right, dan_gir2_y_right, dan_gir2_z_right, dan_gir1, dan_gir2, emg1_dan_right, gir1_dan, emg2_dan_right, gir2_dan, emg1_sr_znach_right, emg2_sr_znach_right, med_emg1_right, med_emg2_right
    file_emg1_right = open('emg_1_right.txt', 'r') # Первый график
    emg1 = file_emg1_right.read()
    dan_emg1_right = emg1.split(' ')
    del dan_emg1_right[len(dan_emg1_right)-1]

    file_gir1_x_right = open('x_gir1_right.txt', 'r') #Второй график гир 1
    gir1_x = file_gir1_x_right.read()
    da_gir1_x = gir1_x.split(' ')
    del da_gir1_x[len(da_gir1_x)-1]
    dan_gir1_x_right = []
    for i in da_gir1_x:
        i = round(float(i))
        dan_gir1_x_right.insert(0, i)

    file_gir1_y_right = open('y_gir1_right.txt', 'r') #Второй график гир 1
    gir1_y = file_gir1_y_right.read()
    da_gir1_y = gir1_y.split(' ')
    del da_gir1_y[len(da_gir1_y)-1]
    dan_gir1_y_right = []
    for i in da_gir1_y:
        i = round(float(i))
        dan_gir1_y_right.insert(0, i)

    file_gir1_z_right = open('z_gir1_right.txt', 'r') #Второй график гир 1
    gir1_z = file_gir1_z_right.read()
    da_gir1_z = gir1_z.split(' ')
    del da_gir1_z[len(da_gir1_z)-1]
    dan_gir1_z_right = []
    for i in da_gir1_z:
        i = round(float(i))
        dan_gir1_z_right.insert(0, i)
        
    file_emg2_right = open('emg_2_right.txt', 'r') #Третий график
    emg2 = file_emg2_right.read()
    dan_emg2_right = emg2.split(' ')
    del dan_emg2_right[len(dan_emg2_right)-1]

    file_gir2_x_right = open('x_gir2_right.txt', 'r') #Четверытй график гир 2
    gir2_x = file_gir2_x_right.read()
    da_gir2_x = gir2_x.split(' ')
    del da_gir2_x[len(da_gir2_x)-1]
    dan_gir2_x_right = []
    for i in da_gir2_x:
        i = round(float(i))
        dan_gir2_x_right.insert(0, i)

    file_gir2_y_right = open('y_gir2_right.txt', 'r') #Четверытй график гир 2
    gir2_y = file_gir2_y_right.read()
    da_gir2_y = gir2_y.split(' ')
    del da_gir2_y[len(da_gir2_y)-1]
    dan_gir2_y_right = []
    for i in da_gir2_y:
        i = round(float(i))
        dan_gir2_y_right.insert(0, i)

    file_gir2_z_right = open('z_gir2_right.txt', 'r') #Четверытй график гир 2
    gir2_z = file_gir2_z_right.read()
    da_gir2_z = gir2_z.split(' ')
    del da_gir2_z[len(da_gir2_z)-1]
    dan_gir2_z_right = []
    for i in da_gir2_z:
        i = round(float(i))
        dan_gir2_z_right.insert(0, i)
    #Значения эмг
    emg1_dan_right = 0
    emg2_dan_right = 0
    b_emg1 = 0
    b_emg2 = 0
    b_gir1_x = 0
    b_gir1_y = 0
    b_gir1_z = 0
    b_gir2_x = 0
    b_gir2_y = 0
    b_gir2_z = 0
    emg1_sr_znach_right = 0
    emg2_sr_znach_right = 0
    srz_gir1_x_right = 0
    srz_gir1_y_right = 0
    srz_gir1_z_right = 0
    srz_gir2_x_right = 0
    srz_gir2_y_right = 0
    srz_gir2_z_right = 0
    summ_emg1 = 0
    summ_emg2 = 0
    summ_gir1_x = 0
    summ_gir1_y = 0
    summ_gir1_z = 0
    summ_gir2_x = 0
    summ_gir2_y = 0
    summ_gir2_z = 0
    m_emg1 =[]
    m_emg2 =[]
    #Расчет сгибаний ЭМГ 1
    for i in range(len(dan_emg1_right)-3):
        if dan_emg1_right[i]>dan_emg1_right[i+1]:
            if int(dan_emg1_right[i]) - int(dan_emg1_right[i+1]) >= 80:
                emg1_dan_right += 1 
        else:
            if int(dan_emg1_right[i+1]) - int(dan_emg1_right[i]) >= 80:
                emg1_dan_right += 1
    #Расчет сгибаний ЭМГ 2
    for i in range(len(dan_emg2_right)-3):
        if dan_emg2_right[i]>dan_emg2_right[i+1]:
            if int(dan_emg2_right[i]) - int(dan_emg2_right[i+1]) >= 80:
                emg2_dan_right += 1 
        else:
            if int(dan_emg2_right[i+1]) - int(dan_emg2_right[i]) >= 80:
                emg2_dan_right += 1
    #Расчет среднего значения ЭМГ 1
    for n in dan_emg1_right:
        b_emg1 += 1
        summ_emg1 += int(n)
    emg1_sr_znach_right = summ_emg1 / b_emg1
    emg1_sr_znach_right = int(round(emg1_sr_znach_right, 0))
    file = open('Среднее значение ЭМГ1 правая рука.txt', 'a')
    file.write(str(emg1_sr_znach_right) + ' ')
    file.close()
    #Расчет среднего значения ЭМГ 2
    for n in dan_emg2_right:
        b_emg2 += 1
        summ_emg2 += int(n)
    emg2_sr_znach_right = summ_emg2 / b_emg2
    emg2_sr_znach_right = int(round(emg2_sr_znach_right, 0))
    file = open('Среднее значение ЭМГ2 правая рука.txt', 'a')
    file.write(str(emg2_sr_znach_right) + ' ')
    file.close()
    #Расчет среднего значения ГИР 1 X
    for n in dan_gir1_x_right:
        b_gir1_x += 1
        summ_gir1_x += int(n)
    srz_gir1_x_right = summ_gir1_x/b_gir1_x
    srz_gir1_x_right = int(round(srz_gir1_x_right, 0))
    #Расчет среднего значения ГИР 1 Y
    for n in dan_gir1_y_right:
        b_gir1_y += 1
        summ_gir1_y += int(n)
    srz_gir1_y_right = summ_gir1_y/b_gir1_y
    srz_gir1_y_right = int(round(srz_gir1_y_right, 0))
    #Расчет среднего значения ГИР 1 Z
    for n in dan_gir1_z_right:
        b_gir1_z += 1
        summ_gir1_z += int(n)
    srz_gir1_z_right = summ_gir1_z/b_gir1_z
    srz_gir1_z_right = int(round(srz_gir1_z_right, 0))


    #Расчет среднего значения ГИР 1 X
    for n in dan_gir2_x_right:
        b_gir2_x += 1
        summ_gir2_x += int(n)
    srz_gir2_x_right = summ_gir2_x/b_gir2_x
    srz_gir2_x_right = int(round(srz_gir2_x_right, 0))
    #Расчет среднего значения ГИР 1 Y
    for n in dan_gir2_y_right:
        b_gir2_y += 1
        summ_gir2_y += int(n)
    srz_gir2_y_right = summ_gir2_y/b_gir2_y
    srz_gir2_y_right = int(round(srz_gir2_y_right, 0))
    #Расчет среднего значения ГИР 1 Z
    for n in dan_gir2_z_right:
        b_gir2_z += 1
        summ_gir2_z += int(n)
    srz_gir2_z_right = summ_gir2_z/b_gir2_z
    srz_gir2_z_right = int(round(srz_gir2_z_right, 0))
    

    #Расчет медианы
    for i in dan_emg1_right:
        m_emg1.insert(0, int(i))
    for i in dan_emg2_right:
        m_emg2.insert(0, int(i))
    med_emg1_right = median(m_emg1)
    med_emg2_right = median(m_emg2)


#Данные для графиков ЛЕВАЯ РУКА
def anal_dan_left():
    global dan_emg1_left,srz_gir1_x_left,srz_gir1_y_left,srz_gir1_z_left,srz_gir2_x_left,srz_gir2_y_left,srz_gir2_z_left, dan_emg2_left, dan_gir1_x_left, dan_gir1_y_left, dan_gir1_z_left, dan_gir2_x_left, dan_gir2_y_left, dan_gir2_z_left, dan_gir1, dan_gir2, emg1_dan_left, gir1_dan, emg2_dan_left, gir2_dan, emg1_sr_znach_left, emg2_sr_znach_left, med_emg1_left, med_emg2_left
    file_emg1_left = open('emg_1_left.txt', 'r') # Первый график
    emg1 = file_emg1_left.read()
    dan_emg1_left = emg1.split(' ')
    del dan_emg1_left[len(dan_emg1_left)-1]

    file_gir1_x_left = open('x_gir1_left.txt', 'r') #Второй график гир 1
    gir1_x = file_gir1_x_left.read()
    da_gir1_x = gir1_x.split(' ')
    del da_gir1_x[len(da_gir1_x)-1]
    dan_gir1_x_left = []
    for i in da_gir1_x:
        i = round(float(i))
        dan_gir1_x_left.insert(0, i)

    file_gir1_y_left = open('y_gir1_left.txt', 'r') #Второй график гир 1
    gir1_y = file_gir1_y_left.read()
    da_gir1_y = gir1_y.split(' ')
    del da_gir1_y[len(da_gir1_y)-1]
    dan_gir1_y_left = []
    for i in da_gir1_y:
        i = round(float(i))
        dan_gir1_y_left.insert(0, i)

    file_gir1_z_left = open('z_gir1_left.txt', 'r') #Второй график гир 1
    gir1_z = file_gir1_z_left.read()
    da_gir1_z = gir1_z.split(' ')
    del da_gir1_z[len(da_gir1_z)-1]
    dan_gir1_z_left = []
    for i in da_gir1_z:
        i = round(float(i))
        dan_gir1_z_left.insert(0, i)
        
    file_emg2_left = open('emg_2_left.txt', 'r') #Третий график
    emg2 = file_emg2_left.read()
    dan_emg2_left = emg2.split(' ')
    del dan_emg2_left[len(dan_emg2_left)-1]

    file_gir2_x_left = open('x_gir2_left.txt', 'r') #Четверытй график гир 2
    gir2_x = file_gir2_x_left.read()
    da_gir2_x = gir2_x.split(' ')
    del da_gir2_x[len(da_gir2_x)-1]
    dan_gir2_x_left = []
    for i in da_gir2_x:
        i = round(float(i))
        dan_gir2_x_left.insert(0, i)

    file_gir2_y_left = open('y_gir2_left.txt', 'r') #Четверытй график гир 2
    gir2_y = file_gir2_y_left.read()
    da_gir2_y = gir2_y.split(' ')
    del da_gir2_y[len(da_gir2_y)-1]
    dan_gir2_y_left = []
    for i in da_gir2_y:
        i = round(float(i))
        dan_gir2_y_left.insert(0, i)

    file_gir2_z_left = open('z_gir2_left.txt', 'r') #Четверытй график гир 2
    gir2_z = file_gir2_z_left.read()
    da_gir2_z = gir2_z.split(' ')
    del da_gir2_z[len(da_gir2_z)-1]
    dan_gir2_z_left = []
    for i in da_gir2_z:
        i = round(float(i))
        dan_gir2_z_left.insert(0, i)
    #Значения эмг
    emg1_dan_left = 0
    emg2_dan_left = 0
    b_emg1 = 0
    b_emg2 = 0
    b_gir1_x = 0
    b_gir1_y = 0
    b_gir1_z = 0
    b_gir2_x = 0
    b_gir2_y = 0
    b_gir2_z = 0
    emg1_sr_znach_left = 0
    emg2_sr_znach_left = 0
    srz_gir1_x_left = 0
    srz_gir1_y_left = 0
    srz_gir1_z_left = 0
    srz_gir2_x_left = 0
    srz_gir2_y_left = 0
    srz_gir2_z_left = 0
    summ_emg1 = 0
    summ_emg2 = 0
    summ_gir1_x = 0
    summ_gir1_y = 0
    summ_gir1_z = 0
    summ_gir2_x = 0
    summ_gir2_y = 0
    summ_gir2_z = 0
    m_emg1 =[]
    m_emg2 =[]
    #Расчет сгибаний ЭМГ 1
    for i in range(len(dan_emg1_left)-3):
        if dan_emg1_left[i]>dan_emg1_left[i+1]:
            if int(dan_emg1_left[i]) - int(dan_emg1_left[i+1]) >= 80:
                emg1_dan_left += 1 
        else:
            if int(dan_emg1_left[i+1]) - int(dan_emg1_left[i]) >= 80:
                emg1_dan_left += 1
    #Расчет сгибаний ��МГ 2
    for i in range(len(dan_emg2_left)-3):
        if dan_emg2_left[i]>dan_emg2_left[i+1]:
            if int(dan_emg2_left[i]) - int(dan_emg2_left[i+1]) >= 80:
                emg2_dan_left += 1 
        else:
            if int(dan_emg2_left[i+1]) - int(dan_emg2_left[i]) >= 80:
                emg2_dan_left += 1
    #Расчет среднего значения ЭМГ 1
    for n in dan_emg1_left:
        b_emg1 += 1
        summ_emg1 += int(n)
    emg1_sr_znach_left = summ_emg1 / b_emg1
    emg1_sr_znach_left = int(round(emg1_sr_znach_left, 0))
    file = open('Среднее значение ЭМГ1 левая рука.txt', 'a')
    file.write(str(emg1_sr_znach_left) + ' ')
    file.close()
    #Расчет среднего значения ЭМГ 2
    for n in dan_emg2_left:
        b_emg2 += 1
        summ_emg2 += int(n)
    emg2_sr_znach_left = summ_emg2 / b_emg2
    emg2_sr_znach_left = int(round(emg2_sr_znach_left, 0))
    file = open('Среднее значение ЭМГ2 левая рука.txt', 'a')
    file.write(str(emg2_sr_znach_left) + ' ')
    file.close()
    #Расчет среднего значения ГИР 1 X
    for n in dan_gir1_x_left:
        b_gir1_x += 1
        summ_gir1_x += int(n)
    srz_gir1_x_left = summ_gir1_x/b_gir1_x
    srz_gir1_x_left = int(round(srz_gir1_x_left, 0))
    #Расчет среднего значения ГИР 1 Y
    for n in dan_gir1_y_left:
        b_gir1_y += 1
        summ_gir1_y += int(n)
    srz_gir1_y_left = summ_gir1_y/b_gir1_y
    srz_gir1_y_left = int(round(srz_gir1_y_left, 0))
    #Расчет среднего значения ГИР 1 Z
    for n in dan_gir1_z_left:
        b_gir1_z += 1
        summ_gir1_z += int(n)
    srz_gir1_z_left = summ_gir1_z/b_gir1_z
    srz_gir1_z_left = int(round(srz_gir1_z_left, 0))


    #Расчет среднего значения ГИР 1 X
    for n in dan_gir2_x_left:
        b_gir2_x += 1
        summ_gir2_x += int(n)
    srz_gir2_x_left = summ_gir2_x/b_gir2_x
    srz_gir2_x_left = int(round(srz_gir2_x_left, 0))
    #Расчет среднего значения ГИР 1 Y
    for n in dan_gir2_y_left:
        b_gir2_y += 1
        summ_gir2_y += int(n)
    srz_gir2_y_left = summ_gir2_y/b_gir2_y
    srz_gir2_y_left = int(round(srz_gir2_y_left, 0))
    #Расчет среднего значения ГИР 1 Z
    for n in dan_gir2_z_left:
        b_gir2_z += 1
        summ_gir2_z += int(n)
    srz_gir2_z_left = summ_gir2_z/b_gir2_z
    srz_gir2_z_left = int(round(srz_gir2_z_left, 0))
    

    #Расчет медианы
    for i in dan_emg1_left:
        m_emg1.insert(0, int(i))
    for i in dan_emg2_left:
        m_emg2.insert(0, int(i))
    med_emg1_left = median(m_emg1)
    med_emg2_left = median(m_emg2)

    

#Вывод данных
def see_dan(list_dan, dan):
    list_dan.insert(INSERT, '\n')
    list_dan.insert(INSERT, 'Данные датчика:')
    list_dan.insert(INSERT, '\n')
    for i in dan:
        list_dan.insert(INSERT, i)
        list_dan.insert(INSERT, '\n')
    


#Заполнение заданий
def create_tren_set(name, row, text):
    name = Label(self.inner_frame_tren, text = str(text) +'.', fg ='grey' , font = ('Product Sans Medium', 20), wraplength = 1330, justify = LEFT )
    name.grid(row = row , column = 1, padx=0, sticky = W )
    text = ''


#Создание переменных
def zad_set(numb_tr, text_tren):
    mass_tren_set = []
    text = text_tren
    numb_tr = len(text_tren)
    for i in range(numb_tr):
        mass_tren_set.append('tren_set_' + str(i))
        create_tren_set(name = mass_tren_set[i], row = i, text = text[i])


#Выход из вкладки 'О программе'
def exit_oprog():
    global fr_oprog
    fr_oprog.destroy()
    global_str()


#Страница 'О программе'
def oprog():
    global fr_oprog, label_oprog_ph, l_ph_o
    l_ph.destroy()
    fr_oprog = Frame(window)
    fr_oprog.pack()
    l_ph_o = Label(fr_oprog, image=ph_o)
    l_ph_o.pack()
    fr_oprog_ph = Label(fr_oprog, width= 1920, height = 1080, bg = 'white')
    fr_oprog_ph.pack()
    btn_oprog_exit = Button(fr_oprog, text = '⊳', command = exit_oprog, bd = 0, bg = 'white', width = 2, height = 1,  font = ('Product Sans Medium', 20) )
    btn_oprog_exit.place(x = 0, y = 0)


#Создать задание
def create_zad(name, row, text):
    name = Label(self.inner_frame_tren, text = str(text) +'.', fg ='black' , font = ('Product Sans Medium', 24)  )
    name.grid(row = row , column = 0, sticky = N, columnspan=1)


#Фрейм заданий
def zad_tren(numb_tr, text_tren):
    global fr_tr, self.inner_frame_tren ,Label_zad_tren_1, Label_zad_tren_2, Label_zad_tren_3, Label_zad_tren_4, Label_zad_tren_5, Label_zad_tren_6, Label_zad_tren_7, Label_zad_tren_8, Label_zad_tren_9, Label_zad_tren_10, Label_zad_tren_11, Label_zad_tren_12, Label_zad_tren_13, Label_zad_tren_14, Label_zad_tren_15, Label_zad_tren_16, Label_zad_tren_17, Label_zad_tren_18, Label_zad_tren_19, Label_zad_tren_20
    mass_tren = []
    numb_tr = len(text_tren)

    #Сам великий фрейм
    fr_tr = ScrolledFrame(fr_tren,width=1422,height=878,relief = 'flat', bg= c_tren)
    fr_tr.place(x=0,y=69)
    self.inner_frame_tren = fr_tr.display_widget(Frame)

    self.inner_frame_tren.rowconfigure(0,pad=15)
    self.inner_frame_tren.rowconfigure(1,pad=15)
    self.inner_frame_tren.rowconfigure(2,pad=15)
    self.inner_frame_tren.rowconfigure(3,pad=15)
    self.inner_frame_tren.rowconfigure(4,pad=15)
    self.inner_frame_tren.rowconfigure(5,pad=15)
    self.inner_frame_tren.rowconfigure(6,pad=15)
    self.inner_frame_tren.rowconfigure(7,pad=15)
    self.inner_frame_tren.rowconfigure(8,pad=15)
    self.inner_frame_tren.rowconfigure(9,pad=15)

    self.inner_frame_tren.columnconfigure(0,pad=8)
    self.inner_frame_tren.columnconfigure(1,pad=8)
    self.inner_frame_tren.columnconfigure(2,pad=8)


    for i in range(numb_tr):
        mass_tren.append('ch_tren_' + str(i))
        create_zad(name = mass_tren[i], row = i, text = i+1)



#Логика работы кнопки Стоп
def show_timer():
    global label
    '''отобразить таймер'''
    m = timer_seconds//60
    s = timer_seconds-m*60
    label['text'] = '%02d:%02d' % (m, s)


#Сброс таймера
def timer_reset():
    global timer_running, timer_seconds, btn_ss
    timer_running = False  # стоп
    btn_ss.configure(text = 'Стaрт', bg = c_tren)
    timer_seconds = default_seconds  # изначальное положение
    label.configure(fg = 'white')
    show_timer()


#Тикер
def timer_tick():
    global timer_seconds
    if timer_running and timer_seconds:
        label.after(1000, timer_tick)  # перезапустить через 1 сек
        # уменьшить таймер
        timer_seconds -= 1
        show_timer()
        if timer_seconds == 0:
            timer_reset()


#Старт\Стоп таймера
def timer_start_pause():
    global btn_ss, timer_running
    timer_running = not timer_running
    if timer_running:
        btn_ss.configure(text = 'Стоп', bg ='#b44d56' )
        timer_tick()
    else:
        btn_ss.configure(text = 'Стaрт', bg = c_tren)


#Выход из тренировки
def exit_tren():
    global fr_tren, timer_seconds
    timer_seconds = 0
    fr_tren.destroy()


#Окно тренировки 1
def tren_1():
    global fr_tren, btn_ss, time_tren_1, timer_seconds, default_seconds, label, numb_tr_1
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_1[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_1[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_1
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_1, text_tren = text_tren_1)
    zad_set(numb_tr = numb_tr_1, text_tren = text_tren_1)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)



#Окно тренировки 2
def tren_2():
    global fr_tren, btn_ss, time_tren_2, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    timer_seconds = time_tren_2

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_2[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_2[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_2
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_2, text_tren = text_tren_2)
    zad_set(numb_tr = numb_tr_2, text_tren = text_tren_2)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 3
def tren_3():
    global fr_tren, btn_ss, time_tren_3, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_3[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_3[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_3
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_3, text_tren = text_tren_3)
    zad_set(numb_tr = numb_tr_3, text_tren = text_tren_3)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 4
def tren_4():
    global fr_tren, btn_ss, time_tren_4, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_4[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_4[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_4
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_4, text_tren = text_tren_4)
    zad_set(numb_tr = numb_tr_4, text_tren = text_tren_4)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 5
def tren_5():
    global fr_tren, btn_ss, time_tren_5, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_5[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_5[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_5
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_5, text_tren = text_tren_5)
    zad_set(numb_tr = numb_tr_5, text_tren = text_tren_5)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 6
def tren_6():
    global fr_tren, btn_ss, time_tren_6, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_6[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_6[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_6
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_6, text_tren = text_tren_6)
    zad_set(numb_tr = numb_tr_6, text_tren = text_tren_6)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 7
def tren_7():
    global fr_tren, btn_ss, time_tren_7, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_7[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_7[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_7
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_7, text_tren = text_tren_7)
    zad_set(numb_tr = numb_tr_7, text_tren = text_tren_7)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 8
def tren_8():
    global fr_tren, btn_ss, time_tren_8, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_8[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_8[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_8
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_8, text_tren = text_tren_8)
    zad_set(numb_tr = numb_tr_8, text_tren = text_tren_8)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 9
def tren_9():
    global fr_tren, btn_ss, time_tren_9, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_9[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_9[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_9
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_9, text_tren = text_tren_9)
    zad_set(numb_tr = numb_tr_9, text_tren = text_tren_9)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 10
def tren_10():
    global fr_tren, btn_ss, time_tren_10, timer_seconds, default_seconds, label
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_10[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_10[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_10
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_10, text_tren = text_tren_10)
    zad_set(numb_tr = numb_tr_10, text_tren = text_tren_10)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 11
def tren_11():
    global fr_tren, btn_ss, time_tren_11, timer_seconds, default_seconds, label, numb_tr_11
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_11[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_11[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_11
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_11, text_tren = text_tren_11)
    zad_set(numb_tr = numb_tr_11, text_tren = text_tren_11)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 12
def tren_12():
    global fr_tren, btn_ss, time_tren_12, timer_seconds, default_seconds, label, numb_tr_12
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_12[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_12[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_12
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_12, text_tren = text_tren_12)
    zad_set(numb_tr = numb_tr_12, text_tren = text_tren_12)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 13
def tren_13():
    global fr_tren, btn_ss, time_tren_13, timer_seconds, default_seconds, label, numb_tr_13
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_13[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_13[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_13
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_13, text_tren = text_tren_13)
    zad_set(numb_tr = numb_tr_13, text_tren = text_tren_13)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 14
def tren_14():
    global fr_tren, btn_ss, time_tren_14, timer_seconds, default_seconds, label, numb_tr_14
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_14[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_14[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_14
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_14, text_tren = text_tren_14)
    zad_set(numb_tr = numb_tr_14, text_tren = text_tren_14)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Окно тренировки 15
def tren_15():
    global fr_tren, btn_ss, time_tren_15, timer_seconds, default_seconds, label, numb_tr_15
    fr_tren = Frame(tab_tren)
    fr_tren.pack()
    label_tren = Label(fr_tren, width =1920, height = 1080, bg = 'white')
    label_tren.pack()

    label_btn_all_dan = Label(fr_tren, bg = c_tren , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_tren, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_tren, fg = 'white', command = exit_tren)
    btn_all_dan_exit.place(x=0,y=0)
    label_name_tren = Label(fr_tren, bg = c_tren, fg = 'white' , text = name_tren_15[0], font = ('Product Sans Medium', 25))
    label_name_tren.place(x=name_tren_15[1], y = 0)

    label_timer_ph = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 25), width = 18, height= 18)
    label_timer_ph.place(x=1450, y = 69)
    btn_ss = Button(fr_tren, text = 'Старт', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_start_pause)
    btn_ss.place(x=1685, y = 854)
    btn_reset = Button(fr_tren, text = 'Сброс', bg = c_tren, fg = 'white', bd = 0 , font = ('Product Sans Medium', 22), width = 9, command = timer_reset)
    btn_reset.place(x=1450, y = 854)
    label_time_tren = Label(fr_tren, text ='Время тренировки:', bg = c_tren_2, fg = 'white', bd = 0 , font = ('Product Sans Medium', 25), width = 20)
    label_time_tren.place(x= 1395, y = 90)

    default_seconds = time_tren_14
    timer_seconds = default_seconds
    label = Label(fr_tren, bg = c_tren_2 , text = '', font = ('Product Sans Medium', 85), fg = 'white', width = 5)
    label.place(x=1435, y= 155)
    timer_reset()

    zad_tren(numb_tr = numb_tr_15, text_tren = text_tren_15)
    zad_set(numb_tr = numb_tr_15, text_tren = text_tren_15)

    canv_tren = Canvas(fr_tren, width = 465, height = 465, bd = 0, bg = c_tren_2)
    canv_tren.place(x=1449, y =385)


#Определение местоположения файла
def passage(file_name, folder):
    for element in os.scandir(folder):
        if element.is_file():
            if element.name == file_name:
                yield folder
        else:
            yield from passage(file_name, element.path)


#Статус психических отклонений
def radio_pcy(number):
    global pcyho
    pcyho = number


#Тупо говнокод чтобы работало ручное изменение подключенного устройства
def status_dev_rych():
    global status_dev
    if status_dev_r == 0:
        pass
    elif status_dev_r == 1:
        status_dev = 1


#Отдельное сохранение каждых данных 4
def create_file_dop_4_right():
    file = open('Гироскоп Плечелучевая мышца правая рука.txt', 'w+')
    file.write('Гироскоп:')
    for i in dan_gir2_x_right:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir2_y_right:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir2_z_right:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    file.close()


#Отдельное сохранение каждых данных 3
def create_file_dop_3_right():
    file = open('ЭМГ Плечелучвая мышца правая рука.txt', 'w+')
    file.write('ЭМГ:')
    for i in dan_emg2_right:
        file.write('\n')
        file.write(i)
    file.close()


#Отдельное сохранение каждых данных 2
def create_file_dop_2_right():
    file = open('Гироскоп Бицепс правая рука.txt', 'w+')
    file.write('Гироскоп:')
    for i in dan_gir1_x_right:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir1_y_right:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir1_z_right:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    file.close()


#Отдельное сохранение каждых данных 1
def create_file_dop_1_right():
    file = open('ЭМГ Бицепс правая рука.txt', 'w+')
    file.write('ЭМГ:')
    for i in dan_emg1_right:
        file.write('\n')
        file.write(i)
    file.close()


#Отдельное сохранение каждых данных 4 левая рука
def create_file_dop_4_left():
    file = open('Гироскоп Плечелучевая мышца левая рука.txt', 'w+')
    file.write('Гироскоп:')
    for i in dan_gir2_x_left:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir2_y_left:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir2_z_left:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    file.close()


#Отдельное сохранение каждых данных 3 левая рука
def create_file_dop_3_left():
    file = open('ЭМГ Плечелучвая мышца левая рука.txt', 'w+')
    file.write('ЭМГ:')
    for i in dan_emg2_left:
        file.write('\n')
        file.write(i)
    file.close()


#Отдельное сохранение каждых данных 2 левая рука
def create_file_dop_2_left():
    file = open('Гироскоп Бицепс левая рука.txt', 'w+')
    file.write('Гироскоп:')
    for i in dan_gir1_x_left:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir1_y_left:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir1_z_left:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    file.close()


#Отдельное сохранение каждых данных 1
def create_file_dop_1_left():
    file = open('ЭМГ Бицепс левая рука.txt', 'w+')
    file.write('ЭМГ:')
    for i in dan_emg1_left:
        file.write('\n')
        file.write(i)
    file.close()


#Сохранение файлов пользователя
def create_file():
    file = open('Данные последней тренировки.txt',"w+")
    body = weight/((height/100)**2)
    body = round(body, 0)
    body = int(body)
    fat = body*0.85
    fat = round(fat,0)
    fat = int(fat)
    cmt = weight - weight * (fat/100) - (weight*0.25)
    cmt = round(cmt,0)
    cmt = int(cmt)
    time_dan = 'Время: ' + str(times) + ' с'
    age_dan = 'Возраст: ' + str(age) + ' лет'
    weight_dan = 'Вес: ' + str(weight) + ' Кг'
    height_dan = 'Рост: ' + str(height) + ' См'
    body_dan = 'Индекс массы: ' + str(body)
    fat_dan = 'Доля жира: ' + str(fat) + ' %'
    cmt_dan = 'Масса мышц: ' + str(cmt) + ' Кг'
    file.write(age_dan)
    file.write('\n' + weight_dan)
    file.write('\n' + height_dan)
    file.write('\n' + body_dan)
    file.write('\n' + fat_dan)
    file.write('\n' + cmt_dan)
    file.write('\n')
    file.write('\nДанные ЭМГ Бицепс правая рука:')
    for i in dan_emg1_right:
        file.write('\n')
        file.write(i)
    file.write('\n')
    file.write('\nДанные Гироскоп Бицепс правая рука:')
    for i in dan_gir1_x_right:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir1_y_right:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir1_z_right:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    file.write('\n')
    file.write('\nДанные ЭМГ Плечелучевая мышца правая рука:')
    for i in dan_emg2_right:
        file.write('\n')
        file.write(i)
    file.write('\n')
    file.write('\nДанные Гироскоп Плечелучевая мышца правая рука:')
    for i in dan_gir2_x_right:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir2_y_right:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir2_z_right:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    
    file.write('\nДанные ЭМГ Бицепс левая рука:')
    for i in dan_emg1_left:
        file.write('\n')
        file.write(i)
    file.write('\n')
    file.write('\nДанные Гироскоп Бицепс левая рука:')
    for i in dan_gir1_x_left:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir1_y_left:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir1_z_left:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    file.write('\n')
    file.write('\nДанные ЭМГ Плечелучевая мышца левая рука:')
    for i in dan_emg2_left:
        file.write('\n')
        file.write(i)
    file.write('\n')
    file.write('\nДанные Гироскоп Плечелучевая мышца левая рука:')
    for i in dan_gir2_x_left:
        file.write('\n')
        file.write('X:')
        file.write(str(i))
    for i in dan_gir2_y_left:
        file.write('\n')
        file.write('Y:')
        file.write(str(i))
    for i in dan_gir2_z_left:
        file.write('\n')
        file.write('Z:')
        file.write(str(i))
    file.close()


#Обновление данных
def reset_status_1():
    global tab_control
    device_connect_usb()
    status_dev_rych()
    if status_dev == 1:
        tab_control.destroy()
        global_str()
        test_zamer()
    elif status_dev == 0:
        tab_control.destroy()
        global_str()
        status_0()


#Подключение устройства через usb
def device_connect_usb():
    global status_dev
    if sys.platform.startswith('win'):
        ports = ['COM%s' % (i + 1) for i in range(256)]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        ports = glob.glob('/dev/tty[A-Za-z]*')
    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*')
    else:
        raise EnvironmentError('Unsupported platform')

    result = []
    for port in ports:
        try:
            s = serial.Serial(port)
            s.close()
            result.append(port)
        except (OSError, serial.SerialException):
            pass
    if result != []:
        status_dev = 1
    else:
        status_dev = 0


def ch_arm():
    global tab_control, status, fr_test_z
    fr_test_z.destroy()
    site_sbor_left()
    status = 1
    status_r()


#Смена самой руки
def change_arm():
    global fr_test_z, label_time_z, fr_time, label_zam_dan
    fr_test_z.destroy()
    fr_test_z = Frame(window)
    fr_test_z.pack()
    label_test_z = Label(fr_test_z, width =1920, height = 1080, bg = 'white')
    label_test_z.pack()

    fr_time = Frame(fr_test_z, width = 1920, height= 1080)
    fr_time.place(x=0,y=0)
    label_time = Label(fr_test_z, width =1920, height = 1080, bg = 'white')
    label_time.pack()

    label_zam_dan = Label(fr_test_z, text = 'Подготовка устройства', font = ('Product Sans Medium', 35), fg= c_dan )
    label_zam_dan.place(x=560,y=250)

    fr_test_z.after(10000, podgotovka_zamer)

    fr_test_z.after(190000, ch_arm)

    timer = Timer(fr_test_z)


#Смена
def new_arm():
    global fr_test_z, label_zam_dan
    fr_test_z.destroy()
    fr_test_z = Frame(window)
    fr_test_z.pack()
    label_test_z = Label(fr_test_z, width =1920, height = 1080, bg = 'white')
    label_test_z.pack()

    site_sbor_right()
    
    btn_new_arm = Button(fr_test_z, text = 'Сменить руку', font = ('Product Sans Medium', 35), fg= c_dan, bg = 'white', command = change_arm, bd = 0 )
    btn_new_arm.place(x=700,y=400)


#Таймер
class Timer:
    global times, status, time_dan, label_zam_dan, chet, ch_2, conf_l, status, fr_test_z

    def __init__(self, parent):
        global times, status
        self.seconds = times
        self.label = Label(parent, text = times, font = ('Product Sans Medium', 35), fg= c_dan, bd =0 )
        self.label.place(x=920,y=340)
        self.label.after(1000, self.refresh_label)


    def refresh_label(self):
        global status, time_dan, age_dan, cmt_dan, fat_dan, weight_dan, body_dan, height_dan, no_dan_1, no_dan_2, no_dan_3, no_dan_4, qua_no_dan_1, qua_no_dan_2, qua_no_dan_3, qua_no_dan_4, conf_l, status, fr_test_z
        self.seconds -= 1
        self.label.configure(text="%i" % self.seconds)
        self.label.after(1000, self.refresh_label)
        if self.seconds == 0:
            if dan_emg_1 == []:
                qua_no_dan_1 = qua_no_dan_1 + 'Неизвестно'
                no_dan_1 = '\nНет данных'
            if dan_gir_1 == []:
                qua_no_dan_2 = qua_no_dan_2 + 'Неизвестно'
                no_dan_2 = '\nНет данных'
            if dan_emg_2 == []:
                qua_no_dan_3 = qua_no_dan_3 + 'Неизвестно'
                no_dan_3 = '\nНет данных'
            if dan_gir_2 == []:
                qua_no_dan_4 = qua_no_dan_4 + 'Неизвестно'
                no_dan_4 = '\nНет данных'
            
        
#Подготовка к замеру 2
def podgotovka_zamer_2():
    global label_zam_dan
    label_zam_dan.configure(text = 'Напрягите руку', fg= '#e44d56' )
    label_zam_dan.place(x=700,y=250)
    fr_test_z.after(10000, podgotovka_zamer)


#Подготовка к замеру
def podgotovka_zamer():
    global label_zam_dan
    label_zam_dan.configure(text = 'Расслабьте руку', fg= c_test )
    label_zam_dan.place(x=680,y=250)
    fr_test_z.after(10000, podgotovka_zamer_2)


#Сборка данных проверяемого
def test_param():
    global age, times, pcyho, weight, height, fr_test_z, label_time_z, fr_time, label_zam_dan, fr_test_z
    age = "{}".format(text_age.get())
    age=int(age)
    weight = "{}".format(text_weight.get())
    weight = int(weight)
    height = "{}".format(text_height.get())
    height = int(height)
    times = times*60 + 10
    score = "{}".format(text_score.get())
    score = int(score)

    fr_test_z.destroy()
    fr_test_z = Frame(window)
    fr_test_z.pack()
    label_test_z = Label(fr_test_z, width =1920, height = 1080, bg = 'white')
    label_test_z.pack()

    fr_time = Frame(fr_test_z, width = 1920, height= 1080)
    fr_time.place(x=0,y=0)
    label_time = Label(fr_test_z, width =1920, height = 1080, bg = 'white')
    label_time.pack()

    label_zam_dan = Label(fr_test_z, text = 'Подготовка устройства', font = ('Product Sans Medium', 35), fg= c_dan )
    label_zam_dan.place(x=560,y=250)

    fr_test_z.after(10000, podgotovka_zamer)

    fr_test_z.after(180000, new_arm)

    timer = Timer(fr_test_z)


#Отображение результата теста Глазго
def summ_glazgo():
    global score, label_result, glaz_score, voice_score, reaction_score, score, btn_result, glaz
    score = 0
    if glaz.get() == 1:
        glaz_score = 4
    elif glaz.get() == 2:
        glaz_score = 3
    elif glaz.get() == 3:
        glaz_score = 2
    elif glaz.get() == 4:
        glaz_score = 1
    
    if voice.get() == 5:
        voice_score = 5
    elif voice.get() == 6:
        voice_score = 4
    elif voice.get() == 7:
        voice_score = 3
    elif voice.get() == 8:
        voice_score = 2
    elif voice.get() == 9:
        voice_score = 1

    if reaction.get() == 10:
        reaction_score = 6
    elif reaction.get() == 11:
        reaction_score = 5
    elif reaction.get() == 12:
        reaction_score = 4
    elif reaction.get() == 13:
        reaction_score = 3
    elif reaction.get() == 14:
        reaction_score = 2
    elif reaction.get() == 15:
        reaction_score = 1

    score = score + reaction_score + voice_score + glaz_score
    label_result.configure(text = score)
    if score >= 10:
        label_result.place(x=1500, y = 270)

    if score == 15: #сознание ясное
        btn_result.configure(text = 'У пациента ясное созание')
    elif 13 <= score <= 14: #оглушение
        btn_result.configure(text = 'У пациента оглушение')
    elif 9 <= score <= 12: #сопор
        btn_result.configure(text = 'У пациента сопор')
    elif 4 <= score <= 8: #кома
        btn_result.configure(text = 'У пациента кома')
    elif score <= 3: #гибель коры
        btn_result.configure(text = 'У пациента гибель коры')

    score = 0


#Выход из теста глазго
def test_glazgo_exit():
    global fr_glaz, score
    score = score + reaction_score + voice_score + glaz_score
    fr_glaz.destroy()
    test_zamer()


#Тест Глазго
def test_glazgo():
    global fr_glaz, score, label_glaz, glaz, voice, reaction, label_result, btn_result
    fr_test_z.destroy()
    fr_glaz = Frame(window)
    fr_glaz.pack()
    label_glaz = Label(fr_glaz, width =1920, height = 1080, bg = 'white')
    label_glaz.pack()

    label_btn_test_glaz = Label(fr_glaz, bg = c_test , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_test_glaz.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_glaz, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_test, fg = 'white', command = test_glazgo_exit)
    btn_all_dan_exit.place(x=0,y=0)
    label_glaz_name = Label(fr_glaz, bg = c_test, fg = 'white' , text = 'Тест Глазго', font = ('Product Sans Medium', 25))
    label_glaz_name.place(x=1620,y=0)

    btn_result = Button(fr_glaz, text = 'Показать результат', width = 84, height = 1, font = ('Product Sans Medium', 20), bg = c_test, fg = 'white', bd = 0, activebackground = 'white', command = summ_glazgo)
    btn_result.place(x=0,y=902)

    label_test_result = Label(fr_glaz, fg = c_test, bg = 'white' , text = 'Ваш результат:', font = ('Product Sans Medium', 35))
    label_test_result.place(x=1350, y = 150)
    label_result = Label(fr_glaz, fg = c_test, bg = 'white' , text = 0, font = ('Product Sans Medium', 100))
    label_result.place(x=1535, y = 270)
    label_score_result = Label(fr_glaz, fg = c_test, bg = 'white' , text = 'Баллов', font = ('Product Sans Medium', 25))
    label_score_result.place(x=1510, y = 520)

    glaz = IntVar()
    voice = IntVar()
    reaction = IntVar()
    glaz.set(0)
    voice.set(0)
    reaction.set(0)

    label_glaz_glaz = Label(fr_glaz,bg = 'white' , fg = c_test , text = 'Открывание глаз:', font = ('Product Sans Medium', 20))
    label_glaz_glaz.place(x=20,y=70)
    radio_glaz_1 = Radiobutton(fr_glaz, text = 'Cпонтанное', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=1, variable=glaz)
    radio_glaz_1.place(x=30, y = 120)
    radio_glaz_2 = Radiobutton(fr_glaz, text = 'Как реакция на голос', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=2, variable=glaz)
    radio_glaz_2.place(x=30, y = 160)
    radio_glaz_3 = Radiobutton(fr_glaz, text = 'Как реакция на боль', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=3, variable=glaz)
    radio_glaz_3.place(x=30, y = 200)
    radio_glaz_4 = Radiobutton(fr_glaz, text = 'Отсутствует', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=4, variable=glaz)
    radio_glaz_4.place(x=30, y = 240)

    label_glaz_voice = Label(fr_glaz,bg = 'white' , fg = c_test , text = 'Речевая реакция:', font = ('Product Sans Medium', 20))
    label_glaz_voice.place(x=20, y=340)
    radio_voice_1 = Radiobutton(fr_glaz, text = 'Больной ориентирован, дает быстрый и правильный ответ на заданный вопрос', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=5, variable=voice)
    radio_voice_1.place(x=30, y = 390)
    radio_voice_2 = Radiobutton(fr_glaz, text = 'Больной дезориентирован, спутанная речь', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=6, variable=voice)
    radio_voice_2.place(x=30, y = 430)
    radio_voice_3 = Radiobutton(fr_glaz, text = 'Словесная окрошка, ответ по смыслу не соответствует вопросу', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=7, variable=voice)
    radio_voice_3.place(x=30, y = 470)
    radio_voice_4 = Radiobutton(fr_glaz, text = 'Нечленораздельные звуки в ответ на заданный вопрос', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=8, variable=voice)
    radio_voice_4.place(x=30, y = 510)
    radio_voice_5 = Radiobutton(fr_glaz, text = 'Отсутствие речи', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value=9, variable=voice)
    radio_voice_5.place(x=30, y = 550)

    label_glaz_reaction = Label(fr_glaz,bg = 'white' , fg = c_test , text = 'Двигательная реакция:', font = ('Product Sans Medium', 20))
    label_glaz_reaction.place(x=20, y=610)
    radio_reaction_1 = Radiobutton(fr_glaz, text = 'Выполнение движений по команде', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value = 10, variable=reaction)
    radio_reaction_1.place(x=30, y = 660)
    radio_reaction_2 = Radiobutton(fr_glaz, text = 'Целенаправленное движение в ответ на болевое раздражение (отталкивание)', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value = 11, variable=reaction)
    radio_reaction_2.place(x=30, y = 700)
    radio_reaction_3 = Radiobutton(fr_glaz, text = 'Отдергивание конечности в ответ на болевое раздражение', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value = 12, variable=reaction)
    radio_reaction_3.place(x=30, y = 740)
    radio_reaction_4 = Radiobutton(fr_glaz, text = 'Патологическое сгибание в ответ на болевое раздражение', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value = 13, variable=reaction)
    radio_reaction_4.place(x=30, y = 780)
    radio_reaction_5 = Radiobutton(fr_glaz, text = 'Патологическое разгибание в ответ на болевое раздражение', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value = 14, variable=reaction)
    radio_reaction_5.place(x=30, y = 820)
    radio_reaction_6 = Radiobutton(fr_glaz, text = 'Отсутствие движений', font = ('Product Sans Medium', 12), bg = 'white', fg = c_test, value = 15, variable=reaction)
    radio_reaction_6.place(x=30, y = 858)


#Выход из Замера
def test_zamer_exit():
    global fr_test_z, btn_dev, btn_global, label_device
    btn_dev.destroy()
    btn_global.destroy()
    label_device.destroy()
    fr_test_z.destroy()
    global_str()


#Замер данных
def test_zamer():
    global fr_test_z, text_age, text_time, text_weight, text_height, text_score
    l_ph.destroy()
    fr_test_z = Frame(window)
    fr_test_z.pack()
    label_test_z = Label(fr_test_z, width =1920, height = 1080, bg = 'white')
    label_test_z.pack()

    label_btn_all_dan = Label(fr_test_z, bg = c_test , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_test_z, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_test, fg = 'white', command = test_zamer_exit)
    btn_all_dan_exit.place(x=0,y=0)

    label_name = Label(fr_test_z, text = 'Ваши параметры', font = ('Product Sans Medium', 35), fg= c_test, bg ='white' )
    label_name.place(x=10,y=80)

    label_age = Label(fr_test_z, text = 'Ваш возраст', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_age.place(x=20, y = 200)
    text_age = Entry(fr_test_z, font = ('Product Sans Medium', 25), fg = c_test, relief = 'flat', width = 3 )
    text_age.place(x=330,y=200)
    text_age.insert(0,age)
    label_age_c = Label(fr_test_z, text = 'лет', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_age_c.place(x=440,y=200)

    label_pcy = Label(fr_test_z, text = 'Были ли проблемы с психикой', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_pcy.place(x=20,y=300)
    rad_pcy_y = Radiobutton(fr_test_z, text = 'Да', font = ('Product Sans Medium', 22), value = 1, bg = 'white', fg =c_test, commnad = radio_pcy(number = 1))
    rad_pcy_y.place(x=750,y=295)
    rad_pcy_n = Radiobutton(fr_test_z, text = 'Нет', font = ('Product Sans Medium', 22), value = 2, bg = 'white', fg =c_test, commnad = radio_pcy(number = 0))
    rad_pcy_n.place(x=870,y=295)

    label_weight = Label(fr_test_z, text = 'Ваш вес', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_weight.place(x=20, y = 400)
    text_weight = Entry(fr_test_z, font = ('Product Sans Medium', 25), fg = c_test, relief = 'flat', width = 3)
    text_weight.place(x=225, y = 400)
    text_weight.insert(0,weight)
    label_weight_c = Label(fr_test_z, text = 'кг', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_weight_c.place(x = 330, y = 400)

    label_height = Label(fr_test_z, text = 'Ваш рост', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_height.place(x=20, y = 500)
    text_height = Entry(fr_test_z, font = ('Product Sans Medium', 25), fg = c_test, relief = 'flat', width = 3)
    text_height.place(x=250,y=500)
    text_height.insert(0,height)
    label_height_c = Label(fr_test_z, text = 'см', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_height_c.place(x=355,y=500)

    label_score = Label(fr_test_z, text = 'Состояние больного, согласно шкале комы Глазго', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_score.place(x=20, y = 600)
    text_score = Entry(fr_test_z, font = ('Product Sans Medium', 25), fg = c_test, relief = 'flat', width = 3)
    text_score.place(x=1220, y = 600)
    text_score.insert(0,score)
    label_score_c = Label(fr_test_z, text = 'Баллов', font = ('Product Sans Medium', 25), fg = 'light grey', bg = 'white')
    label_score_c.place(x=1330, y = 600)
    btn_no_score = Button(fr_test_z, text = 'Я не проходил тест Глазго', font = ('Product Sans Medium', 8), fg = c_test, bg = 'white', bd = 0, activebackground = 'white', command = test_glazgo)
    btn_no_score.place(x = 25, y = 660)

    btn_test_global = Button(fr_test_z, text = 'Запустить', width = 67, height = 1, font = ('Product Sans Medium', 25), bg = c_test, fg = 'white', bd = 0, activebackground = 'white', command = test_param)
    btn_test_global.place(x=0,y=880)
    


#Ручное изменение цвета
def btn_colur_tren_r():
    global t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, b_a_1, b_a_2, b_a_3, b_a_4, b_a_5, b_a_6, b_a_7, b_a_8, b_a_9, b_a_10, b_a_11, b_a_12, b_a_13, b_a_14, b_a_15, b_a_16, b_a_17, b_a_18
    t1 = "{}".format(b_a_1.get())
    t1=int(t1)
    t2 = "{}".format(b_a_2.get())
    t2=int(t2)
    t3 = "{}".format(b_a_3.get())
    t3=int(t3)
    t4 = "{}".format(b_a_4.get())
    t4=int(t4)
    t5 = "{}".format(b_a_5.get())
    t5=int(t5)
    t6 = "{}".format(b_a_6.get())
    t6=int(t6)
    t7 = "{}".format(b_a_7.get())
    t7=int(t7)
    t8 = "{}".format(b_a_8.get())
    t8=int(t8)
    t9 = "{}".format(b_a_9.get())
    t9=int(t9)
    t10 = "{}".format(b_a_10.get())
    t10=int(t10)
    t11 = "{}".format(b_a_11.get())
    t11=int(t11)
    t12 = "{}".format(b_a_12.get())
    t12=int(t12)
    t13 = "{}".format(b_a_13.get())
    t13=int(t13)
    t14 = "{}".format(b_a_14.get())
    t14=int(t14)
    t15 = "{}".format(b_a_15.get())
    t15=int(t15)
    t16 = "{}".format(b_a_16.get())
    t16=int(t16)
    t17 = "{}".format(b_a_17.get())
    t17=int(t17)
    t18 = "{}".format(b_a_18.get())
    t18=int(t18)


#Цвет и размер кнопок взависимости от статуса
def btn_colour_tren(b,t):
    if t == 0:
        b.configure(bg = 'light grey')
    elif t ==1:
        b.configure(bg='#e44d56')
    elif t ==2:
        b.configure(bg='#e5c777')
    elif t ==3:
        b.configure(bg='#b1de9d')


#Выход из всех тренеровок
def dan_all_exit():
    global fr_pod_dan
    fr_pod_dan.destroy()


#Подробнее качество данных ЛЕВАЯ
def dan_pod_all_left():
    global fr_pod_dan
    fr_pod_dan=Frame(tab_dan_left)
    fr_pod_dan.pack()


    label_ph_all_dan = Label(fr_pod_dan, bg = 'white', width = 1920, height = 1080)
    label_ph_all_dan.pack()

    label_btn_all_dan = Label(fr_pod_dan, bg = c_dan , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_pod_dan, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_dan, fg = 'white', command = dan_all_exit)
    btn_all_dan_exit.place(x=0,y=0)

    label_all_dan_name = Label(fr_pod_dan, text = 'Карта пользователя', relief = 'flat', font = ('Product Sans Medium', 25), bg=c_dan, fg = 'white')
    label_all_dan_name.place(x=1400,y=0)

    label_ph_dan = Label(fr_pod_dan, text = '', bg = c_dan_2, width = 49, height = 35)
    label_ph_dan.place(x=0,y=69)

    text_dan_user = scrolledtext.ScrolledText(fr_pod_dan, width=48,height=16, relief = 'flat', font = ('Product Sans Medium', 22), fg =c_dan)
    text_dan_user.place(x=495, y =69)

    body = weight/((height/100)**2)
    body = round(body, 0)
    body = int(body)
    fat = body*0.85
    fat = round(fat,0)
    fat = int(fat)
    cmt = weight - weight * (fat/100) - (weight*0.25)
    cmt = round(cmt,0)
    cmt = int(cmt)
    time_dan = 'Время: ' + str(times) + ' с'
    age_dan = 'Возраст: ' + str(age) + ' лет'
    weight_dan = 'Вес: ' + str(weight) + ' Кг'
    height_dan = 'Рост: ' + str(height) + ' См'
    body_dan = 'Индекс массы: ' + str(body)
    fat_dan = 'Доля жира: ' + str(fat) + ' %'
    cmt_dan = 'Масса мышц: ' + str(cmt) + ' Кг'

    label_age = Label(fr_pod_dan, text = age_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white' )
    label_age.place(x=30, y = 80)
    label_time = Label(fr_pod_dan, text = time_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_time.place(x=30, y = 180)
    label_weight = Label(fr_pod_dan, text = weight_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white' )
    label_weight.place(x=30, y= 280)
    label_height = Label(fr_pod_dan, text = height_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_height.place(x=30, y= 380)
    label_body = Label(fr_pod_dan, text = body_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_body.place(x=30, y = 480)
    label_fat = Label(fr_pod_dan, text = fat_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_fat.place(x=30, y = 580)
    label_cmt = Label(fr_pod_dan, text = cmt_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_cmt.place(x=30,y=680)

    if status_dan_left ==0:
        label_ok = Label(fr_pod_dan, text = 'Проблем не обнаружено', font = ('Product Sans Medium', 30), bg = 'white', fg = c_dan_2)
        label_ok.place(x=870,y=450)


#Подробнее качество данных ПРАВАЯ
def dan_pod_all_right():
    global fr_pod_dan
    fr_pod_dan=Frame(tab_dan_right)
    fr_pod_dan.pack()


    label_ph_all_dan = Label(fr_pod_dan, bg = 'white', width = 1920, height = 1080)
    label_ph_all_dan.pack()

    label_btn_all_dan = Label(fr_pod_dan, bg = c_dan , text = '', font = ('Product Sans Medium', 25), width = 67, height= 1)
    label_btn_all_dan.place(x=0,y=0)
    btn_all_dan_exit = Button(fr_pod_dan, text = '◀', relief = 'flat', font = ('Product Sans Medium', 16), bd=0, bg=c_dan, fg = 'white', command = dan_all_exit)
    btn_all_dan_exit.place(x=0,y=0)

    label_all_dan_name = Label(fr_pod_dan, text = 'Карта пользователя', relief = 'flat', font = ('Product Sans Medium', 25), bg=c_dan, fg = 'white')
    label_all_dan_name.place(x=1400,y=0)

    label_ph_dan = Label(fr_pod_dan, text = '', bg = c_dan_2, width = 49, height = 35)
    label_ph_dan.place(x=0,y=69)

    text_dan_user = scrolledtext.ScrolledText(fr_pod_dan, width=48,height=16, relief = 'flat', font = ('Product Sans Medium', 22), fg =c_dan)
    text_dan_user.place(x=495, y =69)

    body = weight/((height/100)**2)
    body = round(body, 0)
    body = int(body)
    fat = body*0.85
    fat = round(fat,0)
    fat = int(fat)
    cmt = weight - weight * (fat/100) - (weight*0.25)
    cmt = round(cmt,0)
    cmt = int(cmt)
    time_dan = 'Время: ' + str(times) + ' с'
    age_dan = 'Возраст: ' + str(age) + ' лет'
    weight_dan = 'Вес: ' + str(weight) + ' Кг'
    height_dan = 'Рост: ' + str(height) + ' См'
    body_dan = 'Индекс массы: ' + str(body)
    fat_dan = 'Доля жира: ' + str(fat) + ' %'
    cmt_dan = 'Масса мышц: ' + str(cmt) + ' Кг'

    label_age = Label(fr_pod_dan, text = age_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white' )
    label_age.place(x=30, y = 80)
    label_time = Label(fr_pod_dan, text = time_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_time.place(x=30, y = 180)
    label_weight = Label(fr_pod_dan, text = weight_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white' )
    label_weight.place(x=30, y= 280)
    label_height = Label(fr_pod_dan, text = height_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_height.place(x=30, y= 380)
    label_body = Label(fr_pod_dan, text = body_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_body.place(x=30, y = 480)
    label_fat = Label(fr_pod_dan, text = fat_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_fat.place(x=30, y = 580)
    label_cmt = Label(fr_pod_dan, text = cmt_dan, font = ('Product Sans Medium', 25), bg = c_dan_2, fg = 'white')
    label_cmt.place(x=30,y=680)



    if status_dan_right ==0:
        label_ok = Label(fr_pod_dan, text = 'Проблем не обнаружено', font = ('Product Sans Medium', 30), bg = 'white', fg = c_dan_2)
        label_ok.place(x=870,y=450)


#Кнопка подробнее(7 график)
def pod_graph_8():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_left)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    label_pod_name = Label(tab_pod_graph, text = 'Гироскоп Плечелучевая мышца', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=970,y=0)

    canv_8 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_8.create_line(30,1000,30,-400,width=2, fill = c_graph)
    canv_8.create_line(0,770,32000,770,width=2, fill = c_graph)

    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    c = 0

    for i in range(len(dan_gir2_x_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir2_x_left[i]+100
        y2 = dan_gir2_x_left[i+1]+100
        canv_8.create_line(x1, y1 ,x2, y2, width=2, fill = 'red')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir2_y_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir2_y_left[i]+100
        y2 = dan_gir2_y_left[i+1]+100
        canv_8.create_line(x1, y1 ,x2, y2, width=2, fill = 'green')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir2_z_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir2_z_left[i]+100
        y2 = dan_gir2_z_left[i+1]+100
        canv_8.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)
    canv_8.pack()


#Кнопка подробнее(7 график)
def pod_graph_7():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_left)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    label_pod_name = Label(tab_pod_graph, text = 'ЭМГ Плечелучевая мышца', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=1100,y=0)

    canv_7 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_7.create_line(30,1000,30,-200,width=2, fill = c_graph)
    canv_7.create_line(0,770,32000,770,width=2, fill = c_graph)
    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    c = 0
    b = 0
    summ =0

    for i in range(len(dan_emg2_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_emg2_left[i]
        y2 = dan_emg2_left[i+1]
        canv_7.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)
    canv_7.pack()

    for n in dan_emg2_left:
        b += 1
        summ += int(n)
        y = summ/b
    
    canv_7.create_line(30, y ,100000, y, width=2, fill = 'red')


#Кнопка подробнее(6 график)
def pod_graph_6():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_left)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    label_pod_name = Label(tab_pod_graph, text = 'Гироскоп Бицепс', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=1370,y=0)

    canv_6 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_6.create_line(30,1000,30,-200,width=2, fill = c_graph)
    canv_6.create_line(0,770,32000,770,width=2, fill = c_graph)
    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    c = 0
    b = 0
    summ =0

    for i in range(len(dan_gir1_x_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir1_x_left[i]+100
        y2 = dan_gir1_x_left[i+1]+100
        canv_6.create_line(x1, y1 ,x2, y2, width=2, fill = 'red')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir1_y_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir1_y_left[i]+100
        y2 = dan_gir1_y_left[i+1]+100
        canv_6.create_line(x1, y1 ,x2, y2, width=2, fill = 'green')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir1_z_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir1_z_left[i]+100
        y2 = dan_gir1_z_left[i+1]+100
        canv_6.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)


    canv_6.pack()


#Кнопка подробнее(5 график)
def pod_graph_5():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_left)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    label_pod_name = Label(tab_pod_graph, text = 'ЭМГ Бицепс', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=1500,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    canv_5 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_5.create_line(30,1000,30,-200,width=2, fill = c_graph)
    canv_5.create_line(0,770,32000,770,width=2, fill = c_graph)
    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    b = 0
    summ = 0

    for i in range(len(dan_emg1_left)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_emg1_left[i]
        y2 = dan_emg1_left[i+1]
        canv_5.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)
    canv_5.pack()

    for n in dan_emg1_left:
        b += 1
        summ += int(n)
        y = summ/b
    
    canv_5.create_line(30, y ,100000, y, width=2, fill = 'red')



#Кнопка подробнее(4 график)
def pod_graph_4():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_right)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    label_pod_name = Label(tab_pod_graph, text = 'Гироскоп Плечелучевая мышца', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=970,y=0)

    canv_4 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_4.create_line(30,1000,30,-400,width=2, fill = c_graph)
    canv_4.create_line(0,770,32000,770,width=2, fill = c_graph)

    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    c = 0

    for i in range(len(dan_gir2_x_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir2_x_right[i]+100
        y2 = dan_gir2_x_right[i+1]+100
        canv_4.create_line(x1, y1 ,x2, y2, width=2, fill = 'red')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir2_y_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir2_y_right[i]+100
        y2 = dan_gir2_y_right[i+1]+100
        canv_4.create_line(x1, y1 ,x2, y2, width=2, fill = 'green')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir2_z_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir2_z_right[i]+100
        y2 = dan_gir2_z_right[i+1]+100
        canv_4.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)
    canv_4.pack()


#Кнопка подробнее(3 график)
def pod_graph_3():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_right)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    label_pod_name = Label(tab_pod_graph, text = 'ЭМГ Плечелучевая мышца', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=1100,y=0)

    canv_3 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_3.create_line(30,1000,30,-200,width=2, fill = c_graph)
    canv_3.create_line(0,770,32000,770,width=2, fill = c_graph)
    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    c = 0
    b = 0
    summ =0

    for i in range(len(dan_emg2_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_emg2_right[i]
        y2 = dan_emg2_right[i+1]
        canv_3.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)
    canv_3.pack()

    for n in dan_emg2_right:
        b += 1
        summ += int(n)
        y = summ/b
    
    canv_3.create_line(30, y ,100000, y, width=2, fill = 'red')


#Кнопка подробнее(2 график)
def pod_graph_2():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_right)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    label_pod_name = Label(tab_pod_graph, text = 'Гироскоп Бицепс', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=1370,y=0)

    canv_2 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_2.create_line(30,1000,30,-200,width=2, fill = c_graph)
    canv_2.create_line(0,770,32000,770,width=2, fill = c_graph)
    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    c = 0
    b = 0
    summ =0

    for i in range(len(dan_gir1_x_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir1_x_right[i]+100
        y2 = dan_gir1_x_right[i+1]+100
        canv_2.create_line(x1, y1 ,x2, y2, width=2, fill = 'red')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir1_y_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir1_y_right[i]+100
        y2 = dan_gir1_y_right[i+1]+100
        canv_2.create_line(x1, y1 ,x2, y2, width=2, fill = 'green')

    x1 = 30
    x2 = 0

    for i in range(len(dan_gir1_z_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_gir1_z_right[i]+100
        y2 = dan_gir1_z_right[i+1]+100
        canv_2.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)


    canv_2.pack()

    
#Выход из подробных графиков
def exit_pod_graph():
    tab_pod_graph.destroy()


#Кнопка подробнее(1 график)
def pod_graph_1():
    global tab_control, label_device, tab_pod_graph
    tab_pod_graph = Frame(tab_graph_right)
    tab_pod_graph.place(x=0,y=0)

    label_tab_pod_ph = Label(tab_pod_graph, width = 200, height = 45)
    label_tab_pod_ph.pack()

    label_btn_pod = Label(tab_pod_graph, bg = c_graph , text = '', font = ('Product Sans Medium', 31), width = 55, height= 1)
    label_btn_pod.place(x=0,y=0)
    btn_pod_graph_exit = Button(tab_pod_graph, text = '◀', relief = 'flat', font = ('Product Sans Medium', 20), bd=0, bg=c_graph, fg = 'white', command = exit_pod_graph)
    btn_pod_graph_exit.place(x=0,y=0)

    label_pod_name = Label(tab_pod_graph, text = 'ЭМГ Бицепс', relief = 'flat', font = ('Product Sans Medium', 30), bg=c_graph, fg = 'white')
    label_pod_name.place(x=1500,y=0)

    fr_tren = ScrolledFrame(tab_pod_graph,width=1890,height=840,relief = 'flat')
    fr_tren.place(x=0,y=85)
    #Колесо прокрутки
    fr_tren.bind_arrow_keys(tab_pod_graph)
    fr_tren.bind_scroll_wheel(tab_pod_graph)
    #Сам великий фрейм
    self.inner_frame = fr_tren.display_widget(Frame)

    canv_1 = Canvas(self.inner_frame, width = 5000, height = 915)
    canv_1.create_line(30,1000,30,-200,width=2, fill = c_graph)
    canv_1.create_line(0,770,32000,770,width=2, fill = c_graph)
    #Вставка графиков
    x1 = 30
    x2 = 0
    y1 = 0
    y2 = 0
    b = 0
    summ = 0

    for i in range(len(dan_emg1_right)-1):
        x1 += 9
        x2 = x1+9
        y1 = dan_emg1_right[i]
        y2 = dan_emg1_right[i+1]
        canv_1.create_line(x1, y1 ,x2, y2, width=2, fill = c_graph)
    canv_1.pack()

    for n in dan_emg1_right:
        b += 1
        summ += int(n)
        y = summ/b
    
    canv_1.create_line(30, y ,100000, y, width=2, fill = 'red')



#Изменение кнопки взависимости от статусов
def status_prov():
    global btn_test,btn_global
    if status == 0 and status_dev == 1:
        btn_global.configure(text = 'Запустить тест', bg = c_dan, command = test_zamer)
    elif status == 1 and status_dev == 1:
        btn_global.configure(text = 'Показать', width= 15, bg = 'light grey')
        btn_test = Button(window, text = 'Обновить', height = 2, width = 15, font = ('Product Sans Medium', 20), command = test_zamer, bg = '#74aedb', relief='flat', fg='white',bd=0, activebackground = 'white')
        btn_test.place(x=1500,y=780)
    else:
        btn_global.configure(bg = 'grey', fg = 'white', text = 'Нет данных')


#Кнопка обновления
def reset():
    global tab_control
    tab_control.destroy()
    global_str()


#Четвертая кнопка ПРАВАЯ РУКА
def btn_dan_create_4_2_right():
    global btn_dan_4_1_right,btn_dan_4_2_right,btn_dan_4_3_right
    btn_dan_4_1_right.destroy()
    btn_dan_4_1_right= Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_4_1_right,bd=0)
    btn_dan_4_1_right.place(x=1853,y=581)

    btn_dan_4_2_right.destroy()
    btn_dan_4_3_right.destroy()

def btn_dan_create_4_1_right():
    global btn_dan_4_1_right,btn_dan_4_2_right,btn_dan_4_3_right
    btn_dan_4_1_right.destroy()
    btn_dan_4_1_right= Button(tab_dan_right, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_4_2_right,bd=0)
    btn_dan_4_1_right.place(x=1853,y=581)

    btn_dan_4_2_right= Button(tab_dan_right, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_4_right)
    btn_dan_4_2_right.place(x=1800,y=581)
    btn_dan_4_3_right= Button(tab_dan_right, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_4_3_right.place(x=1747,y=581)


#Третья кнопка ПРАВАЯ РУКА
def btn_dan_create_3_2_right():
    global btn_dan_3_1_right,btn_dan_3_2_right,btn_dan_3_3_right
    btn_dan_3_1_right.destroy()
    btn_dan_3_1_right= Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_3_1_right,bd=0)
    btn_dan_3_1_right.place(x=1853, y =201)

    btn_dan_3_2_right.destroy()
    btn_dan_3_3_right.destroy()

def btn_dan_create_3_1_right():
    global btn_dan_3_1_right,btn_dan_3_2_right,btn_dan_3_3_right
    btn_dan_3_1_right.destroy()
    btn_dan_3_1_right= Button(tab_dan_right, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_3_2_right,bd=0)
    btn_dan_3_1_right.place(x=1853, y =201)

    btn_dan_3_2_right= Button(tab_dan_right, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_3_right)
    btn_dan_3_2_right.place(x=1800,y=201)
    btn_dan_3_3_right= Button(tab_dan_right, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_3_3_right.place(x=1747,y=201)


#Вторая кнопка ПРАВАЯ РУКА
def btn_dan_create_2_2_right():
    global btn_dan_2_1_right,btn_dan_2_2_right,btn_dan_2_3_right
    btn_dan_2_1_right.destroy()
    btn_dan_2_1_right= Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_2_1_right,bd=0)
    btn_dan_2_1_right.place(x=663, y =581)

    btn_dan_2_2_right.destroy()
    btn_dan_2_3_right.destroy()


def btn_dan_create_2_1_right():
    global btn_dan_2_1_right,btn_dan_2_2_right,btn_dan_2_3_right
    btn_dan_2_1_right.destroy()
    btn_dan_2_1_right= Button(tab_dan_right, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_2_2_right,bd=0)
    btn_dan_2_1_right.place(x=663, y =581)

    btn_dan_2_2_right= Button(tab_dan_right, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_2_right)
    btn_dan_2_2_right.place(x=610,y=581)
    btn_dan_2_3_right= Button(tab_dan_right, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_2_3_right.place(x=557,y=581)

#Первая кнопка ПРАВАЯ РУКА
def btn_dan_create_1_2_right():
    global btn_dan_1_1_right,btn_dan_1_2_right,btn_dan_1_3_right
    btn_dan_1_1_right.destroy()
    btn_dan_1_1_right = Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_1_1_right,bd=0)
    btn_dan_1_1_right.place(x=663,y=201)


    btn_dan_1_2_right.destroy()
    btn_dan_1_3_right.destroy()

def btn_dan_create_1_1_right():
    global btn_dan_1_1_right,btn_dan_1_2_right,btn_dan_1_3_right
    btn_dan_1_1_right.destroy()
    btn_dan_1_1_right = Button(tab_dan_right, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_1_2_right,bd=0)
    btn_dan_1_1_right.place(x=663,y=201)

    btn_dan_1_2_right= Button(tab_dan_right, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_1_right)
    btn_dan_1_2_right.place(x=610,y=201)
    btn_dan_1_3_right= Button(tab_dan_right, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_1_3_right.place(x=557, y = 201)


#Четвертая кнопка ЛЕВАЯ РУКА
def btn_dan_create_4_2_left():
    global btn_dan_4_1_left,btn_dan_4_2_left,btn_dan_4_3_left
    btn_dan_4_1_left.destroy()
    btn_dan_4_1_left= Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_4_1_left,bd=0)
    btn_dan_4_1_left.place(x=1853,y=581)

    btn_dan_4_2_left.destroy()
    btn_dan_4_3_left.destroy()

def btn_dan_create_4_1_left():
    global btn_dan_4_1_left,btn_dan_4_2_left,btn_dan_4_3_left
    btn_dan_4_1_left.destroy()
    btn_dan_4_1_left= Button(tab_dan_left, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_4_2_left,bd=0)
    btn_dan_4_1_left.place(x=1853,y=581)

    btn_dan_4_2_left= Button(tab_dan_left, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_4_left)
    btn_dan_4_2_left.place(x=1800,y=581)
    btn_dan_4_3_left= Button(tab_dan_left, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_4_3_left.place(x=1747,y=581)


#Третья кнопка ЛЕВАЯ РУКА
def btn_dan_create_3_2_left():
    global btn_dan_3_1_left,btn_dan_3_2_left,btn_dan_3_3_left
    btn_dan_3_1_left.destroy()
    btn_dan_3_1_left= Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_3_1_left,bd=0)
    btn_dan_3_1_left.place(x=1853, y =201)

    btn_dan_3_2_left.destroy()
    btn_dan_3_3_left.destroy()

def btn_dan_create_3_1_left():
    global btn_dan_3_1_left,btn_dan_3_2_left,btn_dan_3_3_left
    btn_dan_3_1_left.destroy()
    btn_dan_3_1_left= Button(tab_dan_left, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_3_2_left,bd=0)
    btn_dan_3_1_left.place(x=1853, y =201)

    btn_dan_3_2_left= Button(tab_dan_left, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_3_left)
    btn_dan_3_2_left.place(x=1800,y=201)
    btn_dan_3_3_left= Button(tab_dan_left, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_3_3_left.place(x=1747,y=201)


#Вторая кнопка ЛЕВАЯ  РУКА
def btn_dan_create_2_2_left():
    global btn_dan_2_1_left,btn_dan_2_2_left,btn_dan_2_3_left
    btn_dan_2_1_left.destroy()
    btn_dan_2_1_left= Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_2_1_left,bd=0)
    btn_dan_2_1_left.place(x=663, y =581)

    btn_dan_2_2_left.destroy()
    btn_dan_2_3_left.destroy()


def btn_dan_create_2_1_left():
    global btn_dan_2_1_left,btn_dan_2_2_left,btn_dan_2_3_left
    btn_dan_2_1_left.destroy()
    btn_dan_2_1_left= Button(tab_dan_left, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_2_2_left,bd=0)
    btn_dan_2_1_left.place(x=663, y =581)

    btn_dan_2_2_left= Button(tab_dan_left, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_2_left)
    btn_dan_2_2_left.place(x=610,y=581)
    btn_dan_2_3_left= Button(tab_dan_left, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_2_3_left.place(x=557,y=581)

#Первая кнопка ЛЕВАЯ РУКА
def btn_dan_create_1_2_left():
    global btn_dan_1_1_left,btn_dan_1_2_left,btn_dan_1_3_left
    btn_dan_1_1_left.destroy()
    btn_dan_1_1_left = Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_1_1_left,bd=0)
    btn_dan_1_1_left.place(x=663,y=201)


    btn_dan_1_2_left.destroy()
    btn_dan_1_3_left.destroy()

def btn_dan_create_1_1_left():
    global btn_dan_1_1_left,btn_dan_1_2_left,btn_dan_1_3_left
    btn_dan_1_1_left.destroy()
    btn_dan_1_1_left = Button(tab_dan_left, text = '▶', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_1_2_left,bd=0)
    btn_dan_1_1_left.place(x=663,y=201)

    btn_dan_1_2_left= Button(tab_dan_left, text = '⇩', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0, command=create_file_dop_1_left)
    btn_dan_1_2_left.place(x=610,y=201)
    btn_dan_1_3_left= Button(tab_dan_left, text = '↺', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2,bd=0)
    btn_dan_1_3_left.place(x=557, y = 201)



#Ручной статус данных
def dan_dev_r():
    global status_dan
    status_dan = "{}".format(text_dev_dan.get())
    status_dan=int(status_dan)


#Проверка данных пациента
def status_dan_prov(tab_dan, status_dan, dan_pod_all ):
    global label_global_dan, label_dan_char

    if status_dan ==0:
        label_global_dan = Label(tab_dan, text='', bg ='white', width = 46, height = 30 )
        label_global_dan.place(x =728, y =195)
        label_dan_char =Label(tab_dan, text = 'У вас все хорошо!', bg = '#9fc98c', width = 20, font = ('Product Sans Medium', 20),fg='white')
        label_dan_char.place(x =728, y =195)
        label_dan_dn = Label(tab_dan, text = 'Ничего не обнаружено', bg = 'white', font = ('Product Sans Medium', 15), fg='#9fc98c' )
        label_dan_dn.place(x=800,y=254)
        btn_dan_pod=Button(tab_dan,text='Подробнее', font = ('Product Sans Medium', 12),bg='#9fc98c',fg='white',relief = 'flat', activebackground = '#9fc91c', activeforeground = 'white', height=1,width=16, bd=0, command=dan_pod_all)
        btn_dan_pod.place(x=728,y=898)
        btn_dan_otpr=Button(tab_dan,text='Сохранить', font = ('Product Sans Medium', 12),bg='#9fc98c',fg='white',relief = 'flat', activebackground = '#9fc91c', activeforeground = 'white', height=1,width=16, bd=0, command = create_file)
        btn_dan_otpr.place(x=960,y=898)

    elif status_dan ==1:
        label_global_dan = Label(tab_dan, text='', bg ='white', width = 46, height = 30 )
        label_global_dan.place(x =728, y =195)
        label_dan_char = Label(tab_dan, text = 'У вас проблемы!', width = 20, font = ('Product Sans Medium', 20),fg='white', bg = '#e44d56')
        label_dan_char.place(x =728, y =195)
        label_dan_dn = Label(tab_dan, text = 'Нам удалось обнаружить:', bg = 'white', font = ('Product Sans Medium', 15), fg='#e44d56' )
        label_dan_dn.place(x=780,y=254)
        btn_dan_pod=Button(tab_dan,text='Подробнее', font = ('Product Sans Medium', 12),bg='#e44d56',fg='white',relief = 'flat', activebackground = '#e00d56', activeforeground = 'white', height=1,width=16, bd=0, command = dan_pod_all)
        btn_dan_pod.place(x=728,y=898)
        btn_dan_otpr=Button(tab_dan,text='Сохранить', font = ('Product Sans Medium', 12),bg='#e44d56',fg='white',relief = 'flat', activebackground = '#e00d56', activeforeground = 'white', height=1,width=16,bd=0, command = create_file)
        btn_dan_otpr.place(x=960,y=898)


#да да да создание кнопки
def global_str():
    global btn_global, btn_dev, btn_test, label_device, st, l_ph
    l_ph = Label(window, image=ph)
    l_ph.pack()

    label_name_prog = Label(window, text = 'Status Assessment System', font = ('Montserrat Bold', 33), bg = 'white')
    label_name_prog.place(x=950, y = 180 )

    btn_global=Button(window, text = 'Анализировать', height = 2, width = 30, font = ('Product Sans Medium', 20), command = status_r, bg = '#74aedb', relief='flat', fg='white',bd=0, activebackground = 'white')
    btn_global.place(x=1150,y = 780)

    btn_o_prog = Button(window, text = 'О программе', bg = 'white', fg = 'grey', bd = 0, font = ('Product Sans Medium', 10), activebackground = 'white', command = oprog)
    btn_o_prog.place(x=0, y =945)

    btn_dev=Button(window, text= '', bg = 'white', width = 3, command=dev, relief='flat')
    btn_dev.place(x=0,y=0)

    device_connect()
    status_prov()


#Выход
def exit_tab():
    global dev, btn_global, label_device
    tab_control.destroy()
    label_device.destroy()
    global_str()


#Изменение статуса подключенного устройства в ручную
def device_r():
    global status_dev_r, test_dev_connect_r
    status_dev_r = "{}".format(text_dev_connect_r.get())
    status_dev_r=int(status_dev_r)


#Изменение статуса в ручную
def status_rych():
    global status, text_status
    status = "{}".format(text_status.get())
    status=int(status)


#Проверка подключенного устройства
def device_connect():
    global label_device, fr_dev
    device_connect_usb()
    status_dev_rych()
    if status_dev == 0:
        label_device=Label(window, text='', font = ('Product Sans Medium', 10), bg = 'white', fg='black')
        label_device.place(x=1150,y=920)
    elif status_dev == 1:
        label_device=Label(window, text='', font = ('Product Sans Medium', 10), bg = 'white', fg='#74aedb')
        label_device.place(x=1150,y=920)
    else:
        pass


#Проверка статуса данных
def status_r():
    global status, btn_global, btn_dev, label_device
    if status == 0:
        btn_global.destroy()
        btn_dev.destroy()
        label_device.destroy()
        status_0()
    elif status == 1:
        btn_global.destroy()
        btn_dev.destroy()
        label_device.destroy()
        status_1()


#Выход из меню разработчика
def exit_dev():
    global btn_global, btn_dev, label_device,fr_dev
    fr_dev.destroy()
    label_device.destroy()
    btn_global.destroy()
    global_str()


#ручной глаз
def glaz_r():
    global score
    score = "{}".format(text_dev_glaz.get())
    score=int(score)


def dev():
    global fr_dev, b_a_1, b_a_2, b_a_3, b_a_4, b_a_5, b_a_6, b_a_7, b_a_8, b_a_9, b_a_10, b_a_11, b_a_12, b_a_13, b_a_14, b_a_15, b_a_16, b_a_17, b_a_18, text_status, text_dev_connect_r, text_dev_dan
    #Груповой фрейм
    btn_global.destroy()
    l_ph.destroy()
    fr_dev = Frame(window)
    fr_dev.pack()
    fr_dev_ph = Label(fr_dev, width= 1920, height = 1080, bg = 'light grey')
    fr_dev_ph.pack()

    #Кнопка выхода
    btn_exit=Button(fr_dev, text = 'Выход', bg = 'light grey', font = ('Product Sans Medium', 10), width = 163, command=exit_dev)
    btn_exit.place(x=0,y=930)
    #Первая вкладка внутренности(НАСТРОЙКИ)
    label_presentationn=Label(fr_dev, text = 'Настройки:', font = ('Product Sans Medium', 40), bg= 'grey', height = 1, fg ='white')
    label_presentationn.place(x=0, y = 0)
    #Пустое простарнство для "НАСТРОЕК"
    label_spacee=Label(fr_dev, text='', font = ('Product Sans Medium', 40), bg= 'grey', height = 1, width=100)
    label_spacee.place(x=422, y=0)
    #Ручное Изменение Статуса
    label_r_status=Label(fr_dev, text='Ручное изменение Статуса:',font = ('Product Sans Medium', 25), bg = 'light grey', fg = 'grey')
    label_r_status.place(x=0,y= 150)
    text_status=Entry(fr_dev, bg='light grey', width=2)
    text_status.place(x=650, y = 174)
    btn_status_rych=Button(fr_dev, text = 'Применить', font = ('Product Sans Medium', 6), relief = 'flat', bg = 'grey', fg = 'white', command = status_rych)
    btn_status_rych.place(x=680,y=174)
    #Изменение статуса подключения
    label_dev_connect_r=Label(fr_dev, text = 'Ручное изменение Device connect:', font = ('Product Sans Medium', 25), bg = 'light grey', fg = 'grey')
    label_dev_connect_r.place(x=0, y=250)
    text_dev_connect_r=Entry(fr_dev,bg='light grey', width=2)
    text_dev_connect_r.place(x=810,y=275)
    btn_dev_rych=Button(fr_dev, text = 'Применить', font = ('Product Sans Medium', 6), relief = 'flat', bg = 'grey', fg = 'white', command = device_r)
    btn_dev_rych.place(x=840,y=275)
    #Изменение данных пациента
    label_dev_dan = Label(fr_dev,text = 'Ручное изменение "Проблем":', font = ('Product Sans Medium', 25), bg = 'light grey', fg = 'grey')
    label_dev_dan.place(x=0,y=350)
    text_dev_dan = Entry(fr_dev,bg='light grey', width=2)
    text_dev_dan.place(x=708,y=375)
    btn_dev_dan = Button(fr_dev, text = 'Применить', font = ('Product Sans Medium', 6), relief = 'flat', bg = 'grey', fg = 'white', command = dan_dev_r)
    btn_dev_dan.place(x=738,y=375)
    #Изменение теста Глазго
    label_dev_glaz = Label(fr_dev,text = 'Ручное изменение Теста:', font = ('Product Sans Medium', 25), bg = 'light grey', fg = 'grey')
    label_dev_glaz.place(x=0, y = 450)
    text_dev_glaz = Entry(fr_dev,bg='light grey', width=2)
    text_dev_glaz.place(x=590,y=475)
    btn_dev_glaz = Button(fr_dev, text = 'Применить', font = ('Product Sans Medium', 6), relief = 'flat', bg = 'grey', fg = 'white', command = dan_dev_r)
    btn_dev_glaz.place(x=738,y=375)

    
    
def status_0():
    global tab_dan_right, tab_graph_right, tab_tren, tab_control, window
    #Удаление фона
    l_ph.destroy()
    #Создание таблицы перемещения
    tab_control=ttk.Notebook(window)
    tab_dan_right= ttk.Frame(tab_control)
    tab_graph_right=ttk.Frame(tab_control)
    tab_tren=ttk.Frame(tab_control)



    #Первая Вкладка(Данные)
    tab_control.add(tab_dan_right, text='Данные')
    tab_control.pack(expand=1, fill='both')
    #Вторая Вкладка(Графики)
    tab_control.add(tab_graph_right,text='Графики')
    tab_control.pack(expand=2, fill='both')
    #Третья Вкладка(Выбор теренеровки)
    tab_control.add(tab_tren, text='Выбор тренировки')
    tab_control.pack(expand=3, fill='both')



    #Первая вкладка внутренности(ДАННЫЕ)
    label_presentation_1=Label(tab_dan_right, text = 'Данные:', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1)
    label_presentation_1.place(x=0, y = 0)
    #Пустое простарнство для "данных"
    label_space_1=Label(tab_dan_right, text='', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1, width=100)
    label_space_1.place(x=322, y=0)
    #Статус бар (DEF)
    label_status_1=Label(tab_dan_right, text = 'Проверка еще не была запущена', font = ('Product Sans Medium', 30), fg ='Grey', bg='light grey',)
    label_status_1.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_1_1=Label(tab_dan_right, text=' ', font = ('Product Sans Medium', 30), bg= 'light grey', width=100)
    label_space_1_1.place(x=934, y = 100)
    #Заполнение для остального простарнства
    label_space_1_2=Label(tab_dan_right, text=' ', font = ('Product Sans Medium', 30), bg= 'light grey', width=100, heigh = 10)
    label_space_1_2.place(x=0,y=180)
    #Кнопка выхода
    btn_exit_dan=Button(tab_dan_right, text = 'Выход', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1,relief = 'flat', activebackground = 'light grey', justify = 'left', command = exit_tab,fg = '#e44d56',bd=0 )
    btn_exit_dan.place(x=1600,y=0)
    #Кнопка обновления
    btn_reset_dan = Button(tab_dan_right, text = 'Проверить еще раз', font =('Product Sans Medium', 25), bg ='#e44d56', fg = 'white', activebackground = 'white', activeforeground = 'black', bd =0, height =1, width =20, command = reset )
    btn_reset_dan.place(x=650,y=400)
    #Пояснительный текст
    label_btn_reset_dan = Label(tab_dan_right, text = 'Провертье свое подключение к интернету и Включено ли устройство',font =('Product Sans Medium', 8), fg = 'grey', bg ='light grey' )
    label_btn_reset_dan.place(x=650,y=510)



    #Вторая вкладка внутренности(ГРАФИКИ)
    label_presentation_2_right=Label(tab_graph_right, text = 'Графики:', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1)
    label_presentation_2_right.place(x=0, y = 0)
    #Пустое пространство для Графиков
    label_space_2=Label(tab_graph_right, text='', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1, width=100)
    label_space_2.place(x=342, y=0)
    #Статус бар (DEF)
    label_status_1=Label(tab_graph_right, text = 'Проверка еще не была запущена', font = ('Product Sans Medium', 30), fg ='Grey', bg='light grey',)
    label_status_1.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_1_1=Label(tab_graph_right, text=' ', font = ('Product Sans Medium', 30), bg= 'light grey', width=100)
    label_space_1_1.place(x=934, y = 100)
    #Заполнение для остального простарнства
    label_space_2_2=Label(tab_graph_right, text=' ', font = ('Product Sans Medium', 30), bg= 'light grey', width=100, heigh = 10)
    label_space_2_2.place(x=0,y=180)
    #Кнопка выхода
    btn_exit_graph=Button(tab_graph_right, text = 'Выход', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1,relief = 'flat', activebackground = 'light grey', justify = 'left', command = exit_tab,fg = '#e44d56',bd=0 )
    btn_exit_graph.place(x=1600,y=0)
    #Кнопка обновления
    btn_reset_graph = Button(tab_graph_right, text = 'Проверить еще раз', font =('Product Sans Medium', 25), bg ='#e44d56', fg = 'white', activebackground = 'white', activeforeground = 'black', bd =0, height =1, width =20, command = reset )
    btn_reset_graph.place(x=650,y=400)
    #Пояснительный текст
    label_btn_reset_graph = Label(tab_graph_right, text = 'Провертье свое подключение к интернету и Включено ли устройство',font =('Product Sans Medium', 8), fg = 'grey', bg ='light grey' )
    label_btn_reset_graph.place(x=650,y=510)



    #Третья вкладка внутренности(ВЫБОР тренировки)
    label_presentation_3=Label(tab_tren, text = 'тренировки:', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1 )
    label_presentation_3.place(x=0, y = 0)
    #Пустое пространство для тренеровок
    label_space_3=Label(tab_tren, text='', font = ('Product Sans Medium', 40), bg= 'light grey', height = 1, width=100)
    label_space_3.place(x=462, y=0)
    #Статус бар (DEF)
    label_status_3=Label(tab_tren, text = 'Проверка еще не была запущена', font = ('Product Sans Medium', 30), fg ='Grey', bg='light grey',)
    label_status_3.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_3_1=Label(tab_tren, text=' ', font = ('Product Sans Medium', 30), bg= 'light grey', width=100)
    label_space_3_1.place(x=934, y = 100)
    #Заполнение для остального простарнства
    label_space_3_2=Label(tab_tren, text=' ', font = ('Product Sans Medium', 30), bg= 'light grey', width=100, heigh = 10)
    label_space_3_2.place(x=0,y=180)
    #Кнопка выхода
    btn_exit_tren=Button(tab_tren, text = 'Выход', font = ('Product Sans Medium', 40), bg= 'light grey',fg = '#e44d56', height = 1,relief = 'flat', activebackground = 'light grey', justify = 'left', command = exit_tab,bd=0 )
    btn_exit_tren.place(x=1600,y=0)
    #Кнопка обновления
    btn_reset_tren = Button(tab_tren, text = 'Проверить еще раз', font =('Product Sans Medium', 25), bg ='#e44d56', fg = 'white', activebackground = 'white', activeforeground = 'black', bd =0, height =1, width =20, command = reset )
    btn_reset_tren.place(x=650,y=400)
    #Пояснительный текст
    label_btn_reset_tren = Label(tab_tren, text = 'Провертье свое подключение к интернету и Включено ли устройство',font =('Product Sans Medium', 8), fg = 'grey', bg ='light grey' )
    label_btn_reset_tren.place(x=650,y=510)


def status_1():
    global tab_dan_right, btn_reset_dan, self.inner_frame, tab_dan_left, tab_graph_right, tab_graph_left, tab_tren, tab_control, b, render, img, btn_dan_1_1_right, btn_dan_2_1_right, btn_dan_3_1_right, btn_dan_4_1_right, btn_dan_1_1_left, btn_dan_2_1_left, btn_dan_3_1_left, btn_dan_4_1_left
    #Удаление фона
    l_ph.destroy()
    #Создание таблицы перемещения
    tab_control=ttk.Notebook(window)
    tab_dan_right= ttk.Frame(tab_control)
    tab_dan_left= ttk.Frame(tab_control)
    tab_graph_right=ttk.Frame(tab_control)
    tab_graph_left=ttk.Frame(tab_control)
    tab_tren=ttk.Frame(tab_control)
    tab_all_graph=ttk.Frame(tab_control)



    #Первая Вкладка(Данные правой руки)
    tab_control.add(tab_dan_right, text='Данные правой руки')
    tab_control.pack(expand=1, fill='both')
    #Вторая Вкладка(Данные левой руки)
    tab_control.add(tab_dan_left, text='Данные левой руки')
    tab_control.pack(expand=2, fill='both')
    #Третья Вкладка(Общий график)
    tab_control.add(tab_all_graph,text='Общий график')
    tab_control.pack(expand=3, fill='both')
    #Четвертая Вкладка(Графики)
    tab_control.add(tab_graph_right, text='Точечные графики правой руки')
    tab_control.pack(expand=4, fill='both')
    #Четвертая Вкладка(Графики)
    tab_control.add(tab_graph_left, text='Точечные графики левой руки')
    tab_control.pack(expand=5, fill='both')
    #Пятая Вкладка(Выбор теренеровки)
    tab_control.add(tab_tren, text='Выбор тренировки')
    tab_control.pack(expand=6, fill='both')
    



    #Первая вкладка внутренности(ДАННЫЕ)
    label_presentation_1_right=Label(tab_dan_right, text = 'Данные правой руки:', font = ('Product Sans Medium', 40), bg = c_dan, fg='white', height = 1)
    label_presentation_1_right.place(x=0, y = 0)
    #Пустое простарнство для "данных"
    label_space_1_right=Label(tab_dan_right, text='', font = ('Product Sans Medium', 40), bg= c_dan, height = 1, width=40)
    label_space_1_right.place(x=795, y=0)
    #Статус бар (DEF)
    label_status_1_right=Label(tab_dan_right, text = 'Проверка прошла успешно!', font = ('Product Sans Medium', 30), fg ='white', bg=c_dan)
    label_status_1_right.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_1_1_right=Label(tab_dan_right, text=' ', font = ('Product Sans Medium', 30), bg= c_dan, width=40)
    label_space_1_1_right.place(x=780, y = 100)
    #Кнопка выхода
    btn_exit_dan_right=Button(tab_dan_right, text = 'Выход', font = ('Product Sans Medium', 20), bg= c_dan, fg='white',relief = 'flat', activebackground = c_dan, command = exit_tab,bd=0 )
    btn_exit_dan_right.place(x=1745,y=0)
    #Кнопка обновления
    btn_reset_dan_right = Button(tab_dan_right, text = 'Обновить', font = ('Product Sans Medium', 20), bg= c_dan, fg='white',relief = 'flat', activebackground = c_dan,command = reset_status_1,bd=0)
    btn_reset_dan_right.place(x=1685,y=90)
    #Подписи данных
    label_dan_1_right = Label(tab_dan_right, text = 'ЭМГ Бицепс', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 13 )
    label_dan_1_right.place(x=15, y = 195)
    label_dan_2_right = Label(tab_dan_right, text = 'Гироскоп Бицепс', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_2_right.place(x=15, y = 575)
    label_dan_3_right = Label(tab_dan_right, text = 'ЭМГ Лучевая', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 13 )
    label_dan_3_right.place(x=1205,y=195)
    label_dan_4_right = Label(tab_dan_right, text = 'Гироскоп Лучевая', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_4_right.place(x=1205,y=575)
    #Место под кнопки
    label_dan_1_b_right = Label(tab_dan_right, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 17 )
    label_dan_1_b_right.place(x=320, y = 195)
    label_dan_2_b_right = Label(tab_dan_right, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_2_b_right.place(x=360,y=575)
    label_dan_3_b_right = Label(tab_dan_right, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 17 )
    label_dan_3_b_right.place(x=1510, y=195)
    label_dan_4_b_right = Label(tab_dan_right, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_4_b_right.place(x=1550,y=575)
    #Кнопки(Первые)
    btn_dan_1_1_right = Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_1_1_right,bd=0)
    btn_dan_1_1_right.place(x=663,y=201)
    btn_dan_2_1_right= Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_2_1_right,bd=0)
    btn_dan_2_1_right.place(x=663, y =581)
    btn_dan_3_1_right= Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_3_1_right,bd=0)
    btn_dan_3_1_right.place(x=1853, y =201)
    btn_dan_4_1_right= Button(tab_dan_right, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_4_1_right,bd=0)
    btn_dan_4_1_right.place(x=1853,y=581)
    #Данные в тексте
    list_dan_1_right = scrolledtext.ScrolledText(tab_dan_right, width=56,height=13, relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_1_right.place(x=15,y=252)
    list_dan_2_right= scrolledtext.ScrolledText(tab_dan_right, width=56,height=13,relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_2_right.place(x=15,y=632)
    list_dan_3_right= scrolledtext.ScrolledText(tab_dan_right, width=56,height=13,relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_3_right.place(x=1205,y=252)
    list_dan_4_right= scrolledtext.ScrolledText(tab_dan_right, width=56,height=13,relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_4_right.place(x=1205,y=632)
    #Данные
    list_dan_1_right.insert(INSERT, qua_no_dan_1)
    list_dan_2_right.insert(INSERT, qua_no_dan_2)
    list_dan_3_right.insert(INSERT, qua_no_dan_3)
    list_dan_4_right.insert(INSERT, qua_no_dan_4)
    list_dan_1_right.insert(INSERT, no_dan_1)
    list_dan_2_right.insert(INSERT, no_dan_2)
    list_dan_3_right.insert(INSERT, no_dan_3)
    list_dan_4_right.insert(INSERT, no_dan_4)
    #Данные датчиков
    see_dan(list_dan_1_right,dan_emg1_right)
    see_dan(list_dan_2_right,dan_gir1_x_right)
    see_dan(list_dan_2_right,dan_gir1_y_right)
    see_dan(list_dan_2_right,dan_gir1_z_right)
    see_dan(list_dan_3_right,dan_emg2_right)
    see_dan(list_dan_4_right,dan_gir2_x_right)
    see_dan(list_dan_4_right,dan_gir2_y_right)
    see_dan(list_dan_4_right,dan_gir2_z_right)
    #Отображение данных (Хорошо или Плохо)
    status_dan_prov(tab_dan = tab_dan_right, status_dan = status_dan_right, dan_pod_all = dan_pod_all_right)



    #Вторая вкладка внутренности(ДАННЫЕ)
    label_presentation_1_left=Label(tab_dan_left, text = 'Данные левой руки:', font = ('Product Sans Medium', 40), bg = c_dan, fg='white', height = 1)
    label_presentation_1_left.place(x=0, y = 0)
    #Пустое простарнство для "данных"
    label_space_1_left=Label(tab_dan_left, text='', font = ('Product Sans Medium', 40), bg= c_dan, height = 1, width=40)
    label_space_1_left.place(x=755, y=0)
    #Статус бар (DEF)
    label_status_1_left=Label(tab_dan_left, text = 'Проверка прошла успешно!', font = ('Product Sans Medium', 30), fg ='white', bg=c_dan)
    label_status_1_left.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_1_1_left=Label(tab_dan_left, text=' ', font = ('Product Sans Medium', 30), bg= c_dan, width=40)
    label_space_1_1_left.place(x=780, y = 100)
    #Кнопка выхода
    btn_exit_dan_left=Button(tab_dan_left, text = 'Выход', font = ('Product Sans Medium', 20), bg= c_dan, fg='white',relief = 'flat', activebackground = c_dan, command = exit_tab,bd=0 )
    btn_exit_dan_left.place(x=1745,y=0)
    #Кнопка обновления
    btn_reset_dan_left = Button(tab_dan_left, text = 'Обновить', font = ('Product Sans Medium', 20), bg= c_dan, fg='white',relief = 'flat', activebackground = c_dan,command = reset_status_1,bd=0)
    btn_reset_dan_left.place(x=1685,y=90)
    #Подписи данных
    label_dan_1_left = Label(tab_dan_left, text = 'ЭМГ Бицепс', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 13 )
    label_dan_1_left.place(x=15, y = 195)
    label_dan_2_left = Label(tab_dan_left, text = 'Гироскоп Бицепс', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_2_left.place(x=15, y = 575)
    label_dan_3_left = Label(tab_dan_left, text = 'ЭМГ Лучевая', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 13 )
    label_dan_3_left.place(x=1205,y=195)
    label_dan_4_left = Label(tab_dan_left, text = 'Гироскоп Лучевая', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_4_left.place(x=1205,y=575)
    #Место под кнопки
    label_dan_1_b_left = Label(tab_dan_left, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 17 )
    label_dan_1_b_left.place(x=320, y = 195)
    label_dan_2_b_left = Label(tab_dan_left, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_2_b_left.place(x=360,y=575)
    label_dan_3_b_left = Label(tab_dan_left, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 17 )
    label_dan_3_b_left.place(x=1510, y=195)
    label_dan_4_b_left = Label(tab_dan_left, text = '', bg =c_dan_2, fg = 'white', font = ('Product Sans Medium', 20), width = 15 )
    label_dan_4_b_left.place(x=1550,y=575)
    #Кнопки(Первые)
    btn_dan_1_1_left = Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_1_1_left,bd=0)
    btn_dan_1_1_left.place(x=663,y=201)
    btn_dan_2_1_left= Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_2_1_left,bd=0)
    btn_dan_2_1_left.place(x=663, y =581)
    btn_dan_3_1_left= Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_3_1_left,bd=0)
    btn_dan_3_1_left.place(x=1853, y =201)
    btn_dan_4_1_left= Button(tab_dan_left, text = '≡', font = ('Product Sans Medium', 11), bg= c_dan_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_dan_2, command = btn_dan_create_4_1_left,bd=0)
    btn_dan_4_1_left.place(x=1853,y=581)
    #Данные в тексте
    list_dan_1_left = scrolledtext.ScrolledText(tab_dan_left, width=56,height=13, relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_1_left.place(x=15,y=252)
    list_dan_2_left= scrolledtext.ScrolledText(tab_dan_left, width=56,height=13,relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_2_left.place(x=15,y=632)
    list_dan_3_left= scrolledtext.ScrolledText(tab_dan_left, width=56,height=13,relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_3_left.place(x=1205,y=252)
    list_dan_4_left= scrolledtext.ScrolledText(tab_dan_left, width=56,height=13,relief = 'flat', font = ('Product Sans Medium', 9), fg ='grey')
    list_dan_4_left.place(x=1205,y=632)
    #Данные
    list_dan_1_left.insert(INSERT, qua_no_dan_1)
    list_dan_2_left.insert(INSERT, qua_no_dan_2)
    list_dan_3_left.insert(INSERT, qua_no_dan_3)
    list_dan_4_left.insert(INSERT, qua_no_dan_4)
    list_dan_1_left.insert(INSERT, no_dan_1)
    list_dan_2_left.insert(INSERT, no_dan_2)
    list_dan_3_left.insert(INSERT, no_dan_3)
    list_dan_4_left.insert(INSERT, no_dan_4)
    #Данные датчиков
    see_dan(list_dan_1_left,dan_emg1_left)
    see_dan(list_dan_2_left,dan_gir1_x_left)
    see_dan(list_dan_2_left,dan_gir1_y_left)
    see_dan(list_dan_2_left,dan_gir1_z_left)
    see_dan(list_dan_3_left,dan_emg2_left)
    see_dan(list_dan_4_left,dan_gir2_x_left)
    see_dan(list_dan_4_left,dan_gir2_y_left)
    see_dan(list_dan_4_left,dan_gir2_z_left)
    #Отображение данных (Хорошо или Плохо)
    status_dan_prov(tab_dan = tab_dan_left, status_dan = status_dan_left, dan_pod_all = dan_pod_all_left )


    #Третья вкладка внутренности(ГРАФИКИ) ПРАВАЯ РУКА
    label_presentation_2_right=Label(tab_graph_right, text = 'Графики правой руки:', font = ('Product Sans Medium', 40), bg= c_graph, fg='white', height = 1)
    label_presentation_2_right.place(x=0, y = 0)
    #Пустое пространство для Графиков
    label_space_2_right=Label(tab_graph_right, text='', font = ('Product Sans Medium', 40), bg= c_graph, height = 1, width=40)
    label_space_2_right.place(x=812, y=0)
    #Статус бар (DEF)
    label_status_2_right=Label(tab_graph_right, text = 'Более наглядное представление!', font = ('Product Sans Medium', 30), fg ='white', bg=c_graph)
    label_status_2_right.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_2_1_right=Label(tab_graph_right, text=' ', font = ('Product Sans Medium', 30), bg= c_graph, width=40)
    label_space_2_1_right.place(x=950, y = 100)
    #Кнопка выхода
    btn_exit_graph_right=Button(tab_graph_right, text = 'Выход', font = ('Product Sans Medium', 20), bg= c_graph, fg='white',relief = 'flat', activebackground = c_graph, command = exit_tab,bd=0 )
    btn_exit_graph_right.place(x=1745,y=0)
    #Кнопка обновления
    btn_reset_graph_right = Button(tab_graph_right, text = 'Обновить', font = ('Product Sans Medium', 20), bg= c_graph, fg='white',relief = 'flat', activebackground = c_graph,command = reset_status_1,bd=0)
    btn_reset_graph_right.place(x=1685,y=90)
    #Подписи графиков
    label_graph_1_right=Label(tab_graph_right,text = 'ЭМГ Бицепс', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_1_right.place(x=1,y=190)
    label_graph_2_right=Label(tab_graph_right,text = 'Гироскоп Бицепс', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_2_right.place(x=480, y=190)
    label_graph_3_right=Label(tab_graph_right,text = 'ЭМГ Лучевая', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_3_right.place(x=963, y=190)
    label_graph_4_right=Label(tab_graph_right,text = 'Гироскоп Лучевая', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_4_right.place(x=1443, y =190)
    #Фон кнопок
    label_btn_pod_1_right = Label(tab_graph_right,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_1_right.place(x=1,y=895)
    label_btn_pod_2_right = Label(tab_graph_right,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_2_right.place(x=480, y=895)
    label_btn_pod_3_right = Label(tab_graph_right,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_3_right.place(x=963, y=895)
    label_btn_pod_4_right = Label(tab_graph_right,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_4_right.place(x = 1443, y = 895)
    #Подробнее
    btn_pod_1_right = Button(tab_graph_right, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0,command = pod_graph_1)
    btn_pod_1_right.place(x=180, y=900)
    btn_pod_2_right = Button(tab_graph_right, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0 ,command = pod_graph_2)
    btn_pod_2_right.place(x=660, y =900)
    btn_pod_3_right = Button(tab_graph_right, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0,command = pod_graph_3)
    btn_pod_3_right.place(x = 660 + 480, y =900)
    btn_pod_4_right = Button(tab_graph_right, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0 ,command = pod_graph_4)
    btn_pod_4_right.place(x = 660 + 480*2, y =900)
    #Фреймы графиков
    fr_graph_1_right=Frame(tab_graph_right, width = 16)
    fr_graph_1_right.place(x = 1, y = 260)
    fr_graph_2_right=Frame(tab_graph_right, width = 16)
    fr_graph_2_right.place(x = 480, y = 260)
    fr_graph_3_right=Frame(tab_graph_right, width = 16)
    fr_graph_3_right.place(x = 963, y = 260)
    fr_graph_4_right=Frame(tab_graph_right, width = 16)
    fr_graph_4_right.place(x = 1443, y = 260)
    #Фон графиков
    label_fr_grpah_1_right = Label(fr_graph_1_right,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_1_right.pack()
    label_fr_grpah_2_right = Label(fr_graph_2_right,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_2_right.pack()
    label_fr_grpah_3_right = Label(fr_graph_3_right,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_3_right.pack()
    label_fr_grpah_4_right = Label(fr_graph_4_right,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_4_right.pack()
    #Среднее значение графиков ЭМГ
    label_sr_znach_1_right = Label(fr_graph_1_right, text = 'Среднее значение:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sr_znach_1_right.place(x=50, y = 0)
    label_sr_znach_3_right = Label(fr_graph_3_right, text = 'Среднее значение:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sr_znach_3_right.place(x=50, y = 0)
    #Само значение 
    label_sr_1_right = Label(fr_graph_1_right, text = emg1_sr_znach_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sr_1_right.place(x=180,y=60)
    label_sr_3_right = Label(fr_graph_3_right, text = emg2_sr_znach_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sr_3_right.place(x=180,y=60)
    #Медиана графиков ЭМГ
    label_median_1_right = Label(fr_graph_1_right, text = 'Медиана:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_median_1_right.place(x=140, y = 150)
    label_median_3_right = Label(fr_graph_3_right, text = 'Медиана:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_median_3_right.place(x=140, y = 150)
    #Само значение
    label_med_1_right= Label(fr_graph_1_right, text = med_emg1_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_med_1_right.place(x=150, y = 210)
    label_med_3_right= Label(fr_graph_3_right, text = med_emg2_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_med_3_right.place(x=150, y = 210)
    #Примерное кол-во сгибаний ЭМГ
    label_sgib_1_right = Label(fr_graph_1_right, text = 'Колличество сгибаний:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sgib_1_right.place(x=13, y = 300)
    label_sgib_3_right = Label(fr_graph_3_right, text = 'Колличество сгибаний:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sgib_3_right.place(x=13, y = 300)
    #Само значение
    label_sgb_1_right = Label(fr_graph_1_right, text = emg1_dan_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sgb_1_right.place(x=180,y=360)
    label_sgb_3_right = Label(fr_graph_3_right, text = emg2_dan_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sgb_3_right.place(x=180,y=360)
    #Среднее значение X Y Z
    label_srznach_x1_right = Label(fr_graph_2_right, text = 'Среднее значение x:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_x1_right.place(x=40, y = 0)
    label_srznach_x2_right = Label(fr_graph_4_right, text = 'Среднее значение x:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_x2_right.place(x=40, y = 0)
    label_srznach_y1_right = Label(fr_graph_2_right, text = 'Среднее значение y:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_y1_right.place(x=40, y = 150)
    label_srznach_y2_right = Label(fr_graph_4_right, text = 'Среднее значение y:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_y2_right.place(x=40, y = 150)
    label_srznach_z1_right = Label(fr_graph_2_right, text = 'Среднее значение z:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_z1_right.place(x=40, y = 300)
    label_srznach_z2_right = Label(fr_graph_4_right, text = 'Среднее значение z:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_z2_right.place(x=40, y = 300)
    #Само значение
    label_srz_x1_right = Label(fr_graph_2_right, text =srz_gir1_x_right ,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_x1_right.place(x=210,y=60)
    label_srz_y1_right = Label(fr_graph_2_right, text = srz_gir1_y_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_y1_right.place(x=210,y=210)
    label_srz_z1_right = Label(fr_graph_2_right, text = srz_gir1_z_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_z1_right.place(x=210,y=360)
    label_srz_x2_right = Label(fr_graph_4_right, text =srz_gir2_x_right ,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_x2_right.place(x=210,y=60)
    label_srz_y2_right = Label(fr_graph_4_right, text = srz_gir2_y_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_y2_right.place(x=210,y=210)
    label_srz_z2_right = Label(fr_graph_4_right, text = srz_gir2_z_right,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_z2_right.place(x=210,y=360)



    #Третья вкладка внутренности(ГРАФИКИ) ЛЕВАЯ РУКА
    label_presentation_2_left=Label(tab_graph_left, text = 'Графики левой руки:', font = ('Product Sans Medium', 40), bg= c_graph, fg='white', height = 1)
    label_presentation_2_left.place(x=0, y = 0)
    #Пустое пространство для Графиков
    label_space_2=Label(tab_graph_left, text='', font = ('Product Sans Medium', 40), bg= c_graph, height = 1, width=40)
    label_space_2.place(x=772, y=0)
    #Статус бар (DEF)
    label_status_2_left=Label(tab_graph_left, text = 'Более наглядное представление!', font = ('Product Sans Medium', 30), fg ='white', bg=c_graph)
    label_status_2_left.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_2_1_left=Label(tab_graph_left, text=' ', font = ('Product Sans Medium', 30), bg= c_graph, width=40)
    label_space_2_1_left.place(x=950, y = 100)
    #Кнопка выхода
    btn_exit_graph_left=Button(tab_graph_left, text = 'Выход', font = ('Product Sans Medium', 20), bg= c_graph, fg='white',relief = 'flat', activebackground = c_graph, command = exit_tab,bd=0 )
    btn_exit_graph_left.place(x=1745,y=0)
    #Кнопка обновления
    btn_reset_graph_left = Button(tab_graph_left, text = 'Обновить', font = ('Product Sans Medium', 20), bg= c_graph, fg='white',relief = 'flat', activebackground = c_graph,command = reset_status_1,bd=0)
    btn_reset_graph_left.place(x=1685,y=90)
    #Подписи графиков
    label_graph_1_left=Label(tab_graph_left,text = 'ЭМГ Бицепс', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_1_left.place(x=1,y=190)
    label_graph_2_left=Label(tab_graph_left,text = 'Гироскоп Бицепс', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_2_left.place(x=480, y=190)
    label_graph_3_left=Label(tab_graph_left,text = 'ЭМГ Лучевая', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_3_left.place(x=963, y=190)
    label_graph_4_left=Label(tab_graph_left,text = 'Гироскоп Лучевая', font = ('Product Sans Medium', 25), bg = c_graph_2, fg = 'white', width = 16)
    label_graph_4_left.place(x=1443, y =190)
    #Фон кнопок
    label_btn_pod_1_left = Label(tab_graph_left,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_1_left.place(x=1,y=895)
    label_btn_pod_2_left = Label(tab_graph_left,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_2_left.place(x=480, y=895)
    label_btn_pod_3_left = Label(tab_graph_left,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_3_left.place(x=963, y=895)
    label_btn_pod_4_left = Label(tab_graph_left,bg=c_graph_2, font = ('Product Sans Medium', 25),width=16)
    label_btn_pod_4_left.place(x = 1443, y = 895)
    #Подробнее
    btn_pod_1_left = Button(tab_graph_left, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0,command = pod_graph_5)
    btn_pod_1_left.place(x=180, y=900)
    btn_pod_2_left = Button(tab_graph_left, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0 ,command = pod_graph_6)
    btn_pod_2_left.place(x=660, y =900)
    btn_pod_3_left = Button(tab_graph_left, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0,command = pod_graph_7)
    btn_pod_3_left.place(x = 660 + 480, y =900)
    btn_pod_4_left = Button(tab_graph_left, text='Подробнее', font = ('Product Sans Medium', 10), fg = 'white',relief = 'flat', bg=c_graph_2, activebackground= c_graph_2,bd=0 ,command = pod_graph_8)
    btn_pod_4_left.place(x = 660 + 480*2, y =900)
    #Фреймы графиков
    fr_graph_1_left=Frame(tab_graph_left, width = 16)
    fr_graph_1_left.place(x = 1, y = 260)
    fr_graph_2_left=Frame(tab_graph_left, width = 16)
    fr_graph_2_left.place(x = 480, y = 260)
    fr_graph_3_left=Frame(tab_graph_left, width = 16)
    fr_graph_3_left.place(x = 963, y = 260)
    fr_graph_4_left=Frame(tab_graph_left, width = 16)
    fr_graph_4_left.place(x = 1443, y = 260)
    #Фон графиков
    label_fr_grpah_1_left = Label(fr_graph_1_left,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_1_left.pack()
    label_fr_grpah_2_left = Label(fr_graph_2_left,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_2_left.pack()
    label_fr_grpah_3_left = Label(fr_graph_3_left,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_3_left.pack()
    label_fr_grpah_4_left = Label(fr_graph_4_left,bg='white',width=16, font = ('Product Sans Medium', 25),height=10)
    label_fr_grpah_4_left.pack()
    #Среднее значение графиков ЭМГ
    label_sr_znach_1_left = Label(fr_graph_1_left, text = 'Среднее значение:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sr_znach_1_left.place(x=50, y = 0)
    label_sr_znach_3_left = Label(fr_graph_3_left, text = 'Среднее значение:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sr_znach_3_left.place(x=50, y = 0)
    #Само значение 
    label_sr_1_left = Label(fr_graph_1_left, text = emg1_sr_znach_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sr_1_left.place(x=180,y=60)
    label_sr_3_left = Label(fr_graph_3_left, text = emg2_sr_znach_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sr_3_left.place(x=180,y=60)
    #Медиана графиков ЭМГ
    label_median_1_left = Label(fr_graph_1_left, text = 'Медиана:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_median_1_left.place(x=140, y = 150)
    label_median_3_left = Label(fr_graph_3_left, text = 'Медиана:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_median_3_left.place(x=140, y = 150)
    #Само значение
    label_med_1_left= Label(fr_graph_1_left, text = med_emg1_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_med_1_left.place(x=150, y = 210)
    label_med_3_left= Label(fr_graph_3_left, text = med_emg2_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_med_3_left.place(x=150, y = 210)
    #Примерное кол-во сгибаний ЭМГ
    label_sgib_1_left = Label(fr_graph_1_left, text = 'Колличество сгибаний:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sgib_1_left.place(x=13, y = 300)
    label_sgib_3_left = Label(fr_graph_3_left, text = 'Колличество сгибаний:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_sgib_3_left.place(x=13, y = 300)
    #Само значение
    label_sgb_1_left = Label(fr_graph_1_left, text = emg1_dan_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sgb_1_left.place(x=180,y=360)
    label_sgb_3_left = Label(fr_graph_3_left, text = emg2_dan_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_sgb_3_left.place(x=180,y=360)
    #Среднее значение X Y Z
    label_srznach_x1_left = Label(fr_graph_2_left, text = 'Среднее значение x:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_x1_left.place(x=40, y = 0)
    label_srznach_x2_left = Label(fr_graph_4_left, text = 'Среднее значение x:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_x2_left.place(x=40, y = 0)
    label_srznach_y1_left = Label(fr_graph_2_left, text = 'Среднее значение y:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_y1_left.place(x=40, y = 150)
    label_srznach_y2_left = Label(fr_graph_4_left, text = 'Среднее значение y:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_y2_left.place(x=40, y = 150)
    label_srznach_z1_left = Label(fr_graph_2_left, text = 'Среднее значение z:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_z1_left.place(x=40, y = 300)
    label_srznach_z2_left = Label(fr_graph_4_left, text = 'Среднее значение z:',fg = c_graph_2 ,bg='white', font = ('Product Sans Medium', 20))
    label_srznach_z2_left.place(x=40, y = 300)
    #Само значение
    label_srz_x1_left = Label(fr_graph_2_left, text =srz_gir1_x_left ,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_x1_left.place(x=210,y=60)
    label_srz_y1_left = Label(fr_graph_2_left, text = srz_gir1_y_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_y1_left.place(x=210,y=210)
    label_srz_z1_left = Label(fr_graph_2_left, text = srz_gir1_z_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_z1_left.place(x=210,y=360)
    label_srz_x2_left = Label(fr_graph_4_left, text =srz_gir2_x_left ,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_x2_left.place(x=210,y=60)
    label_srz_y2_left = Label(fr_graph_4_left, text = srz_gir2_y_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_y2_left.place(x=210,y=210)
    label_srz_z2_left = Label(fr_graph_4_left, text = srz_gir2_z_left,fg = c_tren ,bg='white', font = ('Product Sans Medium', 30))
    label_srz_z2_left.place(x=210,y=360)
    


    #Четвертая вкладка внутренности(ОБЩИЕ ГРАФИКИ)
    label_presentation_2_right=Label(tab_all_graph, text = 'Общий график:', font = ('Product Sans Medium', 40), bg= c_graph, fg='white', height = 1)
    label_presentation_2_right.place(x=0, y = 0)
    #Пустое пространство для Графиков
    label_space_2=Label(tab_all_graph, text='', font = ('Product Sans Medium', 40), bg= c_graph, height = 1, width=40)
    label_space_2.place(x=582, y=0)
    #Статус бар (DEF)
    label_status_2=Label(tab_all_graph, text = 'Общие данные твоих рук!', font = ('Product Sans Medium', 30), fg ='white', bg=c_graph)
    label_status_2.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_2_1=Label(tab_all_graph, text=' ', font = ('Product Sans Medium', 30), bg= c_graph, width=40)
    label_space_2_1.place(x=725, y = 100)
    #Кнопка выхода
    btn_exit_graph=Button(tab_all_graph, text = 'Выход', font = ('Product Sans Medium', 20), bg= c_graph, fg='white',relief = 'flat', activebackground = c_graph, command = exit_tab,bd=0 )
    btn_exit_graph.place(x=1745,y=0)
    #Кнопка обновления
    btn_reset_graph = Button(tab_all_graph, text = 'Обновить', font = ('Product Sans Medium', 20), bg= c_graph, fg='white',relief = 'flat', activebackground = c_graph,command = reset_status_1,bd=0)
    btn_reset_graph.place(x=1685,y=90)
    #Фон описания
    label_dan_graph = Label(tab_all_graph, text=' ', font = ('Product Sans Medium', 30), bg= c_graph_2, width = 11, height = 10)
    label_dan_graph.place(x=1540,y=181)
    label_dan_graph_name = Label(tab_all_graph, text='Описание:', font = ('Product Sans Medium', 30), bg= c_graph_2, width = 11, fg = 'white')
    label_dan_graph_name.place(x=1540, y = 181)
    #Описание графика
    label_red = Label(tab_all_graph, text='ЭМГ Бицепс Правая рука', font = ('Product Sans Medium', 12), bg= c_graph_2, fg = 'white')
    label_red.place(x = 1585, y = 340)
    label_red_c = Label(tab_all_graph, text='', font = ('Product Sans Medium', 12), bg= 'red', fg = 'white', width = 20)
    label_red_c.place(x = 1585, y = 390)

    label_green = Label(tab_all_graph, text='ЭМГ Бицепс Левая рука', font = ('Product Sans Medium', 12), bg= c_graph_2, fg = 'white')
    label_green.place(x = 1585, y = 490)
    label_green_c = Label(tab_all_graph, text='', font = ('Product Sans Medium', 12), bg= 'green', fg = 'white', width = 20)
    label_green_c.place(x = 1585, y = 540)

    label_black = Label(tab_all_graph, text='ЭМГ Лучевая Правая рука', font = ('Product Sans Medium', 12), bg= c_graph_2, fg = 'white')
    label_black.place(x = 1585, y = 640)
    label_black_c = Label(tab_all_graph, text='', font = ('Product Sans Medium', 12), bg= 'black', fg = 'white', width = 20)
    label_black_c.place(x = 1585, y = 690)

    label_orange = Label(tab_all_graph, text='ЭМГ Лучевая Левая рука', font = ('Product Sans Medium', 12), bg= c_graph_2, fg = 'white')
    label_orange.place(x = 1585, y = 790)
    label_orange_c = Label(tab_all_graph, text='', font = ('Product Sans Medium', 12), bg= 'orange', fg = 'white', width = 20)
    label_orange_c.place(x = 1585, y = 840)
    #Фрейм графика
    fr_graph = ScrolledFrame(tab_all_graph,width=1515,height=740,relief = 'flat')
    fr_graph.place(x=0,y=182)
    #Сам великий фрейм
    self.inner_frame_graph = fr_graph.display_widget(Frame)
    #Расстояние между колоннами
    self.inner_frame_graph.columnconfigure(0,pad=15)
    self.inner_frame_graph.columnconfigure(1,pad=15)
    self.inner_frame_graph.columnconfigure(2,pad=15)
    self.inner_frame_graph.columnconfigure(3,pad=15)
    self.inner_frame_graph.columnconfigure(4,pad=15)
    self.inner_frame_graph.columnconfigure(5,pad=15)
    self.inner_frame_graph.columnconfigure(6,pad=15)
    self.inner_frame_graph.columnconfigure(7,pad=15)
    self.inner_frame_graph.columnconfigure(8,pad=15)
    self.inner_frame_graph.columnconfigure(9,pad=15)
    #Канвас графика глобального
    canv_glob = Canvas(self.inner_frame_graph, width = 3000, height = 915)
    canv_glob.create_line(30,1000,30,-200,width=2, fill = c_graph)
    canv_glob.create_line(0,770,32000,770,width=2, fill = c_graph)

    file_x = []
    x1 = 70
    x2 = 0
    y1 = 0
    y2 = 0

    file = open('Среднее значение ЭМГ1 правая рука.txt', 'r')
    file_x = file.read()
    file_x = file_x.split(' ')
    del file_x[len(file_x)-1]
    for i in range(len(file_x)-1):
        x1 += 30
        x2 = x1+30
        y1 = file_x[i]
        y2 = file_x[i+1]
        canv_glob.create_line(x1, 1000 - int(y1) ,x2, 1000 - int(y2), width=2, fill = 'red')
    file.close()
    
    file_x = []
    x1 = 70
    x2 = 0
    y1 = 0
    y2 = 0

    file = open('Среднее значение ЭМГ1 левая рука.txt', 'r')
    file_x = file.read()
    file_x = file_x.split(' ')
    del file_x[len(file_x)-1]
    for i in range(len(file_x)-1):
        x1 += 30
        x2 = x1+30
        y1 = file_x[i]
        y2 = file_x[i+1]
        canv_glob.create_line(x1, 1000 - int(y1) ,x2, 1000 - int(y2), width=2, fill = 'green')
    file.close()

    file_x = []
    x1 = 70
    x2 = 0
    y1 = 0
    y2 = 0

    file = open('Среднее значение ЭМГ2 правая рука.txt', 'r')
    file_x = file.read()
    file_x = file_x.split(' ')
    del file_x[len(file_x)-1]
    for i in range(len(file_x)-1):
        x1 += 30
        x2 = x1+30
        y1 = file_x[i]
        y2 = file_x[i+1]
        canv_glob.create_line(x1, 1000 - int(y1) ,x2, 1000 - int(y2), width=2, fill = 'black')
    file.close()

    file_x = []
    x1 = 70
    x2 = 0
    y1 = 0
    y2 = 0

    file = open('Среднее значение ЭМГ2 левая рука.txt', 'r')
    file_x = file.read()
    file_x = file_x.split(' ')
    del file_x[len(file_x)-1]
    for i in range(len(file_x)-1):
        x1 += 30
        x2 = x1+30
        y1 = file_x[i]
        y2 = file_x[i+1]
        canv_glob.create_line(x1, 1000 - int(y1) ,x2, 1000 - int(y2), width=2, fill = 'orange')
    file.close()

    l_day_0 = Label(self.inner_frame_graph, text=0, font = ('Product Sans Medium', 10))
    l_day_1 = Label(self.inner_frame_graph, text=1, font = ('Product Sans Medium', 10))
    l_day_2 = Label(self.inner_frame_graph, text=2, font = ('Product Sans Medium', 10))   
    l_day_3 = Label(self.inner_frame_graph, text=3, font = ('Product Sans Medium', 10))
    l_day_4 = Label(self.inner_frame_graph, text=4, font = ('Product Sans Medium', 10))
    l_day_5 = Label(self.inner_frame_graph, text=5, font = ('Product Sans Medium', 10))
    l_day_6 = Label(self.inner_frame_graph, text=6, font = ('Product Sans Medium', 10))
    l_day_7 = Label(self.inner_frame_graph, text=7, font = ('Product Sans Medium', 10))
    l_day_8 = Label(self.inner_frame_graph, text=8, font = ('Product Sans Medium', 10))
    l_day_9 = Label(self.inner_frame_graph, text=9, font = ('Product Sans Medium', 10))
    l_day_10 = Label(self.inner_frame_graph, text=10, font = ('Product Sans Medium', 10))
    l_day_11 = Label(self.inner_frame_graph, text=11, font = ('Product Sans Medium', 10))
    l_day_12 = Label(self.inner_frame_graph, text=12, font = ('Product Sans Medium', 10))
    l_day_13 = Label(self.inner_frame_graph, text=13, font = ('Product Sans Medium', 10))
    l_day_14 = Label(self.inner_frame_graph, text=14, font = ('Product Sans Medium', 10))
    l_day_15 = Label(self.inner_frame_graph, text=15, font = ('Product Sans Medium', 10))
    l_day_16 = Label(self.inner_frame_graph, text=16, font = ('Product Sans Medium', 10))
    l_day_17 = Label(self.inner_frame_graph, text=17, font = ('Product Sans Medium', 10))
    l_day_18 = Label(self.inner_frame_graph, text=18, font = ('Product Sans Medium', 10))
    l_day_19 = Label(self.inner_frame_graph, text=19, font = ('Product Sans Medium', 10))
    l_day_20 = Label(self.inner_frame_graph, text=20, font = ('Product Sans Medium', 10))
    l_day_21 = Label(self.inner_frame_graph, text=21, font = ('Product Sans Medium', 10))
    l_day_22 = Label(self.inner_frame_graph, text=22, font = ('Product Sans Medium', 10))
    l_day_23 = Label(self.inner_frame_graph, text=23, font = ('Product Sans Medium', 10))
    l_day_24 = Label(self.inner_frame_graph, text=24, font = ('Product Sans Medium', 10))
    l_day_25 = Label(self.inner_frame_graph, text=25, font = ('Product Sans Medium', 10))
    l_day_26 = Label(self.inner_frame_graph, text=26, font = ('Product Sans Medium', 10))
    l_day_27 = Label(self.inner_frame_graph, text=27, font = ('Product Sans Medium', 10))
    l_day_28 = Label(self.inner_frame_graph, text=28, font = ('Product Sans Medium', 10))
    l_day_29 = Label(self.inner_frame_graph, text=29, font = ('Product Sans Medium', 10))
    l_day_30 = Label(self.inner_frame_graph, text=30, font = ('Product Sans Medium', 10))
    l_day_31 = Label(self.inner_frame_graph, text=31, font = ('Product Sans Medium', 10))
    l_day_32 = Label(self.inner_frame_graph, text=32, font = ('Product Sans Medium', 10))
    l_day_33 = Label(self.inner_frame_graph, text=33, font = ('Product Sans Medium', 10))
    l_day_34 = Label(self.inner_frame_graph, text=34, font = ('Product Sans Medium', 10))
    l_day_35 = Label(self.inner_frame_graph, text=35, font = ('Product Sans Medium', 10))
    l_day_36 = Label(self.inner_frame_graph, text=36, font = ('Product Sans Medium', 10))
    l_day_37 = Label(self.inner_frame_graph, text=37, font = ('Product Sans Medium', 10))
    l_day_38 = Label(self.inner_frame_graph, text=38, font = ('Product Sans Medium', 10))
    l_day_39 = Label(self.inner_frame_graph, text=39, font = ('Product Sans Medium', 10))
    l_day_40 = Label(self.inner_frame_graph, text=40, font = ('Product Sans Medium', 10))
    l_day_0.place(x = 10 , y = 771)
    l_day_1.place(x = 70 , y = 771)
    l_day_2.place(x = 130 , y = 771)    
    l_day_3.place(x = 190 , y = 771)
    l_day_4.place(x = 250 , y = 771)
    l_day_5.place(x = 310 , y = 771)
    l_day_6.place(x = 370 , y = 771) 
    l_day_7.place(x = 430 , y = 771) 
    l_day_8.place(x = 490 , y = 771)
    l_day_9.place(x = 550 , y = 771)
    l_day_10.place(x = 610 , y = 771)
    l_day_15.place(x = 670 , y = 771)
    l_day_16.place(x = 730 , y = 771)
    l_day_17.place(x = 790 , y = 771)
    l_day_18.place(x = 850 , y = 771)
    l_day_19.place(x = 910 , y = 771)
    l_day_20.place(x = 970 , y = 771)
    l_day_21.place(x = 1030 , y = 771)
    l_day_22.place(x = 1090 , y = 771)
    l_day_23.place(x = 1150 , y = 771)
    l_day_24.place(x = 1210 , y = 771)
    l_day_25.place(x = 1270 , y = 771)
    l_day_26.place(x = 1330 , y = 771)
    l_day_27.place(x = 1390 , y = 771)
    l_day_28.place(x = 1450 , y = 771)
    l_day_29.place(x = 1510 , y = 771)
    l_day_30.place(x = 1570 , y = 771)
    l_day_31.place(x = 1630 , y = 771)
    l_day_32.place(x = 1690 , y = 771)
    l_day_33.place(x = 1750 , y = 771)
    l_day_34.place(x = 1810 , y = 771)
    l_day_35.place(x = 1870 , y = 771)
    l_day_36.place(x = 1930 , y = 771)
    l_day_37.place(x = 1990 , y = 771)
    l_day_38.place(x = 2050 , y = 771)
    l_day_39.place(x = 2110 , y = 771)
    l_day_40.place(x = 2170 , y = 771)
    canv_glob.pack() 
    

    #Третья вкладка внутренности(ВЫБОР тренировки)
    label_presentation_3=Label(tab_tren, text = 'Тренировки:', font = ('Product Sans Medium', 40), bg= c_tren, fg='white', height = 1 )
    label_presentation_3.place(x=0, y = 0)
    #Пустое пространство для тренеровок
    label_space_3=Label(tab_tren, text='', font = ('Product Sans Medium', 40), bg= c_tren, height = 1, width=100)
    label_space_3.place(x=462, y=0)
    #Статус бар (DEF)
    label_status_3=Label(tab_tren, text = 'Cпорт - это важно!', font = ('Product Sans Medium', 30), fg ='white', bg=c_tren,)
    label_status_3.place(x=0, y = 100)
    #Пустое пространство для "Статус бара"
    label_space_3_1=Label(tab_tren, text=' ', font = ('Product Sans Medium', 30), bg= c_tren, width=100)
    label_space_3_1.place(x=524, y = 100)
    #Кнопка выхода
    btn_exit_tren=Button(tab_tren, text = 'Выход', font = ('Product Sans Medium', 20), bg= c_tren, fg='white',relief = 'flat', activebackground = c_tren, command = exit_tab, bd=0 )
    btn_exit_tren.place(x=1745,y=0)
    #Кнопка обновления
    btn_reset_dan = Button(tab_tren, text = '+', font = ('Product Sans Medium', 22), bg= c_tren, fg='white',relief = 'flat', command = new_tren, activebackground = c_tren,bd=0)
    btn_reset_dan.place(x=1825,y=88)

    if (status_dan_left == 1 or status_dan_left == 1) and score > 8:
        #Подписи + кнопки
        label_tren_btn = Label(tab_tren, text = 'Наиболее подходящие тренировки:', font = ('Product Sans Medium', 20), bg=c_tren_2, fg = 'white'  )
        label_tren_btn.place(x=0,y=182)
        label_tren_btn_space = Label(tab_tren, font = ('Product Sans Medium', 20), bg=c_tren_2, fg = 'white', width = 55 )
        label_tren_btn_space.place(x=670,y=182)
        btn_tren_dop = Button(tab_tren, text = '↺', font = ('Product Sans Medium', 11), bg= c_tren_2, fg='white', height = 1,width = 3,relief = 'flat', activebackground = c_tren_2,bd=0)
        btn_tren_dop.place(x=1865,y=188)
        #тренировки
        fr = ScrolledFrame(tab_tren,width=1915,height=670,relief = 'flat')
        fr.place(x=0,y=253)
        #Сам великий фрейм
        self.inner_frame = fr.display_widget(Frame)
        #Расстояние между колоннами
        self.inner_frame.columnconfigure(0,pad=15)
        self.inner_frame.columnconfigure(1,pad=15)
        self.inner_frame.columnconfigure(2,pad=15)
        self.inner_frame.columnconfigure(3,pad=15)
        self.inner_frame.columnconfigure(4,pad=15)
        self.inner_frame.columnconfigure(5,pad=15)
        self.inner_frame.columnconfigure(6,pad=15)
        self.inner_frame.columnconfigure(7,pad=15)
        self.inner_frame.columnconfigure(8,pad=15)
        self.inner_frame.columnconfigure(9,pad=15)
        self.inner_frame.columnconfigure(10,pad=15)
        self.inner_frame.columnconfigure(11,pad=15)
        self.inner_frame.columnconfigure(12,pad=15)
        self.inner_frame.columnconfigure(13,pad=15)
        self.inner_frame.columnconfigure(14,pad=15)

        #Сами кнопки
        btn_tren_1 = Button(self.inner_frame, text = '1', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_1, command = tren_1)
        btn_tren_1.grid(column=0,row=0)
        btn_tren_2 = Button(self.inner_frame, text = '2', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_2, command = tren_2)
        btn_tren_2.grid(column=1,row=0)
        btn_tren_3 = Button(self.inner_frame, text = '3', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_3, command = tren_3)
        btn_tren_3.grid(column=2,row=0)
        btn_tren_4 = Button(self.inner_frame, text = '4', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_4, command = tren_4)
        btn_tren_4.grid(column=3,row=0)
        btn_tren_5 = Button(self.inner_frame, text = '5', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_5, command = tren_5)
        btn_tren_5.grid(column=4,row=0)
        btn_tren_6 = Button(self.inner_frame, text = '6', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_6, command = tren_6)
        btn_tren_6.grid(column=5,row=0)
        btn_tren_7 = Button(self.inner_frame, text = '7', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_7, command = tren_7)
        btn_tren_7.grid(column=6,row=0)
        btn_tren_8 = Button(self.inner_frame, text = '8', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_8, command = tren_8)
        btn_tren_8.grid(column=7,row=0)
        btn_tren_9 = Button(self.inner_frame, text = '9', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_9, command = tren_9)
        btn_tren_9.grid(column=8,row=0)
        btn_tren_10 = Button(self.inner_frame, text = '10', bg = 'light grey', fg = 'white', height = 538,width = 620,relief = 'flat',bd=0, image = ph_tren_10, command = tren_10)
        btn_tren_10.grid(column=9,row=0)
        #Название
        label_btn_tren_1 = Label(self.inner_frame, text = name_tren_1[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_1.grid(column=0,row=1)
        label_btn_tren_2 = Label(self.inner_frame, text = name_tren_2[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_2.grid(column=1,row=1)
        label_btn_tren_3 = Label(self.inner_frame, text = name_tren_3[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20)
        label_btn_tren_3.grid(column=2,row=1)
        label_btn_tren_4 = Label(self.inner_frame, text = name_tren_4[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_4.grid(column=3,row=1)
        label_btn_tren_5 = Label(self.inner_frame, text = name_tren_5[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_5.grid(column=4,row=1)
        label_btn_tren_6 = Label(self.inner_frame, text = name_tren_6[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_6.grid(column=5,row=1)
        label_btn_tren_7 = Label(self.inner_frame, text = name_tren_7[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_7.grid(column=6,row=1)
        label_btn_tren_8 = Label(self.inner_frame, text = name_tren_8[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_8.grid(column=7,row=1)
        label_btn_tren_9 = Label(self.inner_frame, text = name_tren_9[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_9.grid(column=8,row=1)
        label_btn_tren_10 = Label(self.inner_frame, text = name_tren_10[0], font = ('Product Sans Medium', 27), bg=c_tren_2,fg='white',width=20 )
        label_btn_tren_10.grid(column=9,row=1)
        #Вид(Аэоробная, Анаэробная, Интер��альная, Гипоксическая)
        label_btn_tren_v_1 = Label(self.inner_frame, text = name_tren_1[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_1.grid(column=0,row=2)
        label_btn_tren_v_2 = Label(self.inner_frame, text = name_tren_2[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_2.grid(column=1,row=2)
        label_btn_tren_v_3 = Label(self.inner_frame, text = name_tren_3[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_3.grid(column=2,row=2)
        label_btn_tren_v_4 = Label(self.inner_frame, text = name_tren_4[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_4.grid(column=3,row=2)
        label_btn_tren_v_5 = Label(self.inner_frame, text = name_tren_5[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_5.grid(column=4,row=2)
        label_btn_tren_v_6 = Label(self.inner_frame, text = name_tren_6[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_6.grid(column=5,row=2)
        label_btn_tren_v_7= Label(self.inner_frame, text = name_tren_7[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_7.grid(column=6,row=2)
        label_btn_tren_v_8 = Label(self.inner_frame, text = name_tren_8[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_8.grid(column=7,row=2)
        label_btn_tren_v_9 = Label(self.inner_frame, text = name_tren_9[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_9.grid(column=8,row=2)
        label_btn_tren_v_10 = Label(self.inner_frame, text = name_tren_10[2], font = ('Product Sans Medium', 20), bg=c_tren_2,fg='grey',width=27, justify=LEFT )
        label_btn_tren_v_10.grid(column=9,row=2)
    elif (status_dan_left == 1 or status_dan_left == 1) and score <=8:
        label_no_tren = Label(tab_tren, text = '-Доктор! Симулянт умер.', font = ('Product Sans Medium', 35), fg='#e44d56')
        label_no_tren.place(x=510, y = 380)
    elif (status_dan_left == 0 and status_dan_left == 0):
        label_no_tren = Label(tab_tren, text = 'У вас все хорошо', font = ('Product Sans Medium', 40), fg=c_tren_2)
        label_no_tren.place(x=650, y = 350)
        label_no_tren_2 = Label(tab_tren, text = 'тренировки не нужны', font = ('Product Sans Medium', 25), fg=c_tren_2)
        label_no_tren_2.place(x=700, y = 460)


#________________Обработка данных________________
global_str()
anal_dan_left()
anal_dan_right()

#________________Завершение программы________________
window.mainloop()
